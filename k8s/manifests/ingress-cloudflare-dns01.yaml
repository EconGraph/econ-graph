# Ingress configuration with Cloudflare DNS-01 challenge support for wildcard certificates
# This enables both HTTP-01 (for specific domains) and DNS-01 (for wildcards) challenges

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: econ-graph-ingress-cloudflare
  namespace: econ-graph
  annotations:
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "5"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "5"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "5"
    
    # SSL/TLS configuration with Cloudflare DNS-01 challenge
    cert-manager.io/cluster-issuer: "letsencrypt-prod-cloudflare"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: SAMEORIGIN";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self' wss:";
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # Proxy configuration
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    
    # Cloudflare-specific optimizations
    nginx.ingress.kubernetes.io/cloudflare-real-ip: "true"
    nginx.ingress.kubernetes.io/whitelist-source-range: "173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22"
spec:
  ingressClassName: nginx
  
  # TLS configuration for wildcard certificate
  tls:
  - hosts:
    - "econgraph.example.com"      # Replace with your actual domain
    - "*.econgraph.example.com"    # Wildcard for subdomains
    - "api.econgraph.example.com"  # API subdomain
    - "admin.econgraph.example.com" # Admin subdomain
    secretName: econgraph-wildcard-tls
  
  rules:
  # Main frontend
  - host: econgraph.example.com  # Replace with your actual domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: econ-graph-frontend-service
            port:
              number: 3000
  
  # API subdomain
  - host: api.econgraph.example.com  # Replace with your actual domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: econ-graph-backend-service
            port:
              number: 9876
  
  # Admin subdomain
  - host: admin.econgraph.example.com  # Replace with your actual domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: econ-graph-admin-frontend-service
            port:
              number: 3001

---
# Monitoring ingress with Cloudflare DNS-01 challenge
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: monitoring-ingress-cloudflare
  namespace: econ-graph
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "5"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "5"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "5"
    
    # SSL/TLS configuration with Cloudflare DNS-01 challenge
    cert-manager.io/cluster-issuer: "letsencrypt-prod-cloudflare"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    
    # Authentication (basic auth for additional security)
    nginx.ingress.kubernetes.io/auth-type: "basic"
    nginx.ingress.kubernetes.io/auth-secret: "monitoring-auth"
    nginx.ingress.kubernetes.io/auth-realm: "EconGraph Monitoring"
    
    # Cloudflare-specific optimizations
    nginx.ingress.kubernetes.io/cloudflare-real-ip: "true"
spec:
  ingressClassName: nginx
  
  # TLS configuration for monitoring subdomain
  tls:
  - hosts:
    - "grafana.econgraph.example.com"  # Replace with your actual domain
    secretName: monitoring-tls
  
  rules:
  # Grafana monitoring
  - host: grafana.econgraph.example.com  # Replace with your actual domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3000

---
# Basic auth secret for monitoring
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-auth
  namespace: econ-graph
type: Opaque
data:
  # Username: admin, Password: admin123 (change in production!)
  auth: YWRtaW46JGFwcjEkS2J6bWl4S1kkWGV6U1NkRjZ6dHlGcXl0Z0h4d2JqLg==
