# Cursor AI Development Rules

## Code Quality Standards

### ESLint Error Handling
- **ALWAYS fix ESLint errors immediately when they appear**
- **NEVER ignore or skip ESLint errors** - they must be resolved before completing any task
- **NEVER leave unused imports, variables, or functions** - clean them up automatically
- **Always run `npm run lint` after making changes** to verify no new errors were introduced
- **Use `npm run lint:fix` when available** to automatically fix fixable ESLint issues
- **For unfixable ESLint errors, address the root cause** rather than using disable comments
- **ESLint warnings should be addressed** but may be temporarily acceptable if they don't affect functionality

### Rust Code Quality
- **NEVER allow Rust format issues** - always run `cargo fmt` immediately after any Rust changes
- **ALWAYS fix Clippy warnings** - run `cargo clippy` and address all issues before completing tasks
- **Rust compilation errors are NEVER acceptable** - fix immediately
- **Follow Rust naming conventions and best practices** consistently
- **Use `cargo check` frequently** during development to catch issues early

### Merge Conflict Resolution
- **NEVER allow merge conflicts to persist** - fix them immediately when they occur
- **ALWAYS resolve conflicts properly** by understanding both sides of the change
- **NEVER commit merge conflict markers** (`<<<<<<<`, `=======`, `>>>>>>>`)
- **After resolving conflicts, always test** to ensure functionality still works
- **Use `git status` to verify** no unresolved conflicts remain before committing
- **When in doubt, ask for clarification** rather than making assumptions about which changes to keep

### Testing Requirements  
- **Always add tests when creating new components or pages**
- **Always write comprehensive tests for features you implement** - cover happy path, edge cases, and error scenarios
- **Always write tests for bugs you discover** - create a failing test first, then fix the bug to make it pass
- **Tests must catch missing components and blank page issues**
- **Authentication-dependent features must have auth flow tests**
- **All routes must be tested to ensure they render correctly**
- **Tests should prevent runtime errors from reaching production**
- **Test coverage should be comprehensive** - aim for 80%+ coverage on critical paths
- **Write tests that would have caught the current issue** when fixing bugs
- **Mock external dependencies appropriately** to focus tests on the component being tested
- **Test user interactions and workflows** not just component rendering

### Development Workflow
1. Write/modify code
2. Run ESLint and fix ALL errors
3. Run tests and ensure they pass
4. Commit changes only after ESLint and tests are clean
5. Monitor CI and fix any failures immediately

### Component Development
- **Always import only what you use** - remove unused imports immediately
- **Clean up unused variables and functions** as you work
- **Ensure all props and state are used** or remove them
- **Mock complex dependencies in tests** to focus on component logic

### Error Prevention
- **Test authentication flows** to prevent blank pages for logged-in users
- **Verify all routes render content** and don't show blank screens  
- **Mock missing components in tests** to catch import/dependency issues
- **Add comprehensive test coverage** for critical user paths

## Memory: User Preferences
- User prefers doing things correctly and properly, even if it requires additional setup
- User expects zero failing tests and comprehensive test coverage
- User wants all ESLint errors fixed automatically without being asked
- User values professional-quality code with proper error handling