name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run CI on (leave empty for current branch)'
        required: false
        default: ''
        type: string

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

jobs:
  grafana-dashboard-validation:
    name: Grafana Dashboard Validation
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't gate other jobs on this
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Setup validation tools
      run: |
        # Install jq for JSON validation
        sudo apt-get update
        sudo apt-get install -y jq

        # Install yq for YAML validation
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq

    - name: Make validation script executable
      run: chmod +x scripts/test-grafana-dashboards.sh

    - name: 🔍 JSON Syntax Validation
      run: ./scripts/test-grafana-dashboards.sh --step=json-syntax
      continue-on-error: true

    - name: 🏗️ Dashboard Structure Validation
      run: ./scripts/test-grafana-dashboards.sh --step=dashboard-structure
      continue-on-error: true

    - name: 🔗 Datasource Consistency Validation
      run: ./scripts/test-grafana-dashboards.sh --step=datasource-consistency
      continue-on-error: true

    - name: 📊 PromQL Query Validation
      run: ./scripts/test-grafana-dashboards.sh --step=promql-queries
      continue-on-error: true

    - name: 📝 LogQL Query Validation
      run: ./scripts/test-grafana-dashboards.sh --step=logql-queries
      continue-on-error: true

    - name: 📋 ConfigMap Structure Validation
      run: ./scripts/test-grafana-dashboards.sh --step=configmap-structure
      continue-on-error: true

    - name: 🔧 Kubernetes Deployment Validation
      run: ./scripts/test-grafana-dashboards.sh --step=k8s-deployment
      continue-on-error: true

    - name: 🎯 Complete Dashboard Validation
      run: ./scripts/test-grafana-dashboards.sh
      continue-on-error: true

    - name: Upload validation results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: grafana-validation-results-${{ github.sha }}
        path: |
          grafana-dashboards/
          k8s/monitoring/grafana-*.yaml
        retention-days: 30

  backend-smoke-tests:
    name: Backend Smoke Tests (Fast)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
        key: ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-${{ hashFiles('backend/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-
          ${{ runner.os }}-shared-cargo-

    - name: Install shared tools
      run: |
        if ! command -v diesel &> /dev/null; then
          cargo install diesel_cli --no-default-features --features postgres
        fi
        if ! command -v cargo-audit &> /dev/null; then
          cargo install cargo-audit
        fi
        if ! command -v cargo-deny &> /dev/null; then
          cargo install cargo-deny
        fi
      working-directory: backend

    - name: Check Rust formatting
      run: cargo fmt --all -- --check
      working-directory: backend

    - name: Run Clippy (linting)
      run: cargo clippy --all-targets --all-features -- -D warnings -A unused_imports -A dead_code -A clippy::empty_line_after_doc_comments -A clippy::explicit_auto_deref -A clippy::unused_enumerate_index -A clippy::manual_range_contains -A clippy::unnecessary_map_or -A clippy::inherent_to_string -A clippy::too_many_arguments -A clippy::uninlined_format_args -A clippy::needless_borrow -A unused_variables -A clippy::if_same_then_else -A clippy::assertions_on_constants -A clippy::useless_vec -A clippy::overly_complex_bool_expr -A clippy::manual_clamp -A clippy::upper_case_acronyms -A unused_must_use -A unused_mut -A clippy::derivable_impls
      working-directory: backend

    - name: Build backend
      run: cargo build --verbose
      working-directory: backend

    - name: Run fast unit tests (no database)
      run: cargo test --lib -- --test-threads=4 --nocapture config auth::services metrics
      working-directory: backend
      env:
        RUST_LOG: warn




  backend-models-basic-tests:
    name: Backend Models Basic Tests
    runs-on: ubuntu-latest
    timeout-minutes: 12
    needs: [backend-smoke-tests]
    if: github.ref == 'refs/heads/main' || github.event.inputs.branch == 'main' || github.event.inputs.branch == ''

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache Rust dependencies (read-only from smoke tests)
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
        key: ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-${{ hashFiles('backend/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

    - name: Run backend models basic tests
      run: cargo test --lib -- --test-threads=2 --nocapture models::data_source::tests::simple_tests models::economic_series::tests::simple_tests models::data_point::tests::simple_tests models::crawl_queue::tests::simple_tests models::search::tests::simple_tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

  backend-models-advanced-tests:
    name: Backend Models Advanced Tests
    runs-on: ubuntu-latest
    timeout-minutes: 12
    needs: [backend-smoke-tests]
    if: github.ref == 'refs/heads/main' || github.event.inputs.branch == 'main' || github.event.inputs.branch == ''

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache Rust dependencies (read-only from smoke tests)
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
        key: ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-${{ hashFiles('backend/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5433/econ_graph_test

    - name: Run backend models advanced tests
      run: cargo test --lib -- --test-threads=2 --nocapture models::data_source::tests models::economic_series::tests models::data_point::tests models::crawl_queue::tests models::search::tests models::series_metadata::tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5433/econ_graph_test

  backend-crawler-unit-tests:
    name: Backend Crawler Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [backend-smoke-tests]
    if: github.ref == 'refs/heads/main' || github.event.inputs.branch == 'main' || github.event.inputs.branch == ''

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5434:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache Rust dependencies (read-only from smoke tests)
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
        key: ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-${{ hashFiles('backend/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5434/econ_graph_test

    - name: Run backend crawler unit tests
      run: cargo test --lib -- --test-threads=2 --nocapture services::crawler::tests::test_catalog_downloader_creation services::crawler::tests::test_series_downloader_creation services::crawler::simple_crawler_service::tests services::crawler::enhanced_crawler_scheduler::tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5434/econ_graph_test

  backend-crawler-integration-tests:
    name: Backend Crawler Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [backend-smoke-tests]
    if: github.ref == 'refs/heads/main' || github.event.inputs.branch == 'main' || github.event.inputs.branch == ''

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5435:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache Rust dependencies (read-only from smoke tests)
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
        key: ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-${{ hashFiles('backend/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5435/econ_graph_test

    - name: Run backend crawler integration tests
      run: cargo test --lib -- --test-threads=2 --nocapture services::crawler::tests::test_crawler_with_database services::crawler::tests::test_file_crawling_with_series_downloader services::crawler::tests::test_file_url_crawling services::crawler::tests::test_file_url_error_handling services::crawler::tests::test_file_url_with_special_characters services::crawler::tests::test_multiple_file_urls
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5435/econ_graph_test

  backend-queue-basic-tests:
    name: Backend Queue Basic Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [backend-smoke-tests]
    if: github.ref == 'refs/heads/main' || github.event.inputs.branch == 'main' || github.event.inputs.branch == ''

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5436:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache Rust dependencies (read-only from smoke tests)
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
        key: ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-${{ hashFiles('backend/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5436/econ_graph_test

    - name: Run backend queue basic tests
      run: cargo test --lib -- --test-threads=2 --nocapture services::queue_service::tests::test_get_and_lock_next_item services::queue_service::tests::test_queue_item_locking_and_unlocking services::queue_service::tests::test_queue_status_updates services::queue_service::tests::test_queue_retry_logic services::queue_service::tests::test_queue_skip_locked_functionality
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5436/econ_graph_test

  backend-queue-advanced-tests:
    name: Backend Queue Advanced Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [backend-smoke-tests]
    if: github.ref == 'refs/heads/main' || github.event.inputs.branch == 'main' || github.event.inputs.branch == ''

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5437:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache Rust dependencies (read-only from smoke tests)
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
        key: ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-${{ hashFiles('backend/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5437/econ_graph_test

    - name: Run backend queue advanced tests
      run: cargo test --lib -- --test-threads=2 --nocapture services::queue_service::tests::test_queue_concurrent_access services::queue_service::tests::test_queue_statistics_with_processing_time services::queue_service::tests::test_queue_statistics_empty services::queue_service::tests::test_queue_error_handling services::queue_service::tests::test_queue_scheduled_items services::queue_service::tests::test_get_stuck_items services::queue_service::tests::test_unlock_stuck_items services::queue_service::tests::test_mark_item_failed services::queue_service::tests::test_cleanup_old_queue_items
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5437/econ_graph_test

  backend-global-analysis-basic-tests:
    name: Backend Global Analysis Basic Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [backend-smoke-tests]
    if: github.ref == 'refs/heads/main' || github.event.inputs.branch == 'main' || github.event.inputs.branch == ''

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5438:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache Rust dependencies (read-only from smoke tests)
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
        key: ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-${{ hashFiles('backend/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5438/econ_graph_test

    - name: Run backend global analysis basic tests
      run: cargo test --lib -- --test-threads=2 --nocapture services::global_analysis_service::tests::test_get_countries_with_economic_data services::global_analysis_service::tests::test_get_global_events_with_impacts services::global_analysis_service::tests::test_get_global_events_with_filters services::global_analysis_service::tests::test_direct_event_query services::global_analysis_service::tests::test_event_insertion_only services::global_analysis_service::tests::test_trade_partners_retrieval
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5438/econ_graph_test

  backend-global-analysis-advanced-tests:
    name: Backend Global Analysis Advanced Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [backend-smoke-tests]
    if: github.ref == 'refs/heads/main' || github.event.inputs.branch == 'main' || github.event.inputs.branch == ''

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5439:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache Rust dependencies (read-only from smoke tests)
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
        key: ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-${{ hashFiles('backend/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5439/econ_graph_test

    - name: Run backend global analysis advanced tests
      run: cargo test --lib -- --test-threads=2 --nocapture services::global_analysis_service::tests::test_get_correlation_network services::global_analysis_service::tests::test_calculate_country_correlations services::global_analysis_service::tests::test_calculate_economic_health_score services::global_analysis_service::tests::test_correlation_network_centrality_calculation services::global_analysis_service::tests::test_error_handling_database_connection_failure
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5439/econ_graph_test

  backend-series-discovery-basic-tests:
    name: Backend Series Discovery Basic Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [backend-smoke-tests]
    if: github.ref == 'refs/heads/main' || github.event.inputs.branch == 'main' || github.event.inputs.branch == ''

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5440:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache Rust dependencies (read-only from smoke tests)
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
        key: ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-${{ hashFiles('backend/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5440/econ_graph_test

    - name: Run backend series discovery basic tests
      run: cargo test --lib -- --test-threads=2 --nocapture services::series_discovery::boc::tests::test_boc_data_source_creation services::series_discovery::boe::tests::test_boe_data_source_creation services::series_discovery::boj::tests::test_boj_data_source_creation services::series_discovery::ecb::tests::test_ecb_data_source_creation services::series_discovery::fhfa::tests::test_fhfa_data_source_creation services::series_discovery::ilo::tests::test_ilo_data_source_creation services::series_discovery::oecd::tests::test_oecd_data_source_creation services::series_discovery::rba::tests::test_rba_data_source_creation services::series_discovery::snb::tests::test_snb_data_source_creation services::series_discovery::unstats::tests::test_unstats_data_source_creation services::series_discovery::wto::tests::test_wto_data_source_creation
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5440/econ_graph_test

  backend-series-discovery-integration-tests:
    name: Backend Series Discovery Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [backend-smoke-tests]
    if: github.ref == 'refs/heads/main' || github.event.inputs.branch == 'main' || github.event.inputs.branch == ''

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5441:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache Rust dependencies (read-only from smoke tests)
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
        key: ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-${{ hashFiles('backend/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5441/econ_graph_test

    - name: Run backend series discovery integration tests
      run: cargo test --lib -- --test-threads=2 --nocapture services::series_discovery::boc::tests::test_discover_series services::series_discovery::boe::tests::test_discover_series services::series_discovery::boj::tests::test_discover_series services::series_discovery::ecb::tests::test_discover_series services::series_discovery::fhfa::tests::test_discover_series services::series_discovery::ilo::tests::test_discover_series services::series_discovery::oecd::tests::test_discover_series services::series_discovery::rba::tests::test_discover_series services::series_discovery::snb::tests::test_discover_series services::series_discovery::unstats::tests::test_discover_series services::series_discovery::wto::tests::test_discover_series
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5441/econ_graph_test

  backend-auth-integration-tests:
    name: Backend Auth Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [backend-smoke-tests]
    if: github.ref == 'refs/heads/main' || github.event.inputs.branch == 'main' || github.event.inputs.branch == ''

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5442:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache Rust dependencies (read-only from smoke tests)
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
        key: ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-${{ hashFiles('backend/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5442/econ_graph_test

    - name: Run backend auth integration tests
      run: cargo test --lib -- --test-threads=2 --nocapture auth::integration_tests auth::comprehensive_integration_tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5442/econ_graph_test

  backend-collaboration-integration-tests:
    name: Backend Collaboration Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [backend-smoke-tests]
    if: github.ref == 'refs/heads/main' || github.event.inputs.branch == 'main' || github.event.inputs.branch == ''

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5443:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache Rust dependencies (read-only from smoke tests)
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
        key: ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-${{ hashFiles('backend/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5443/econ_graph_test

    - name: Run backend collaboration integration tests
      run: cargo test --lib -- --test-threads=2 --nocapture collaboration_integration_tests services::collaboration_service::tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5443/econ_graph_test

  backend-remaining-service-tests:
    name: Backend Remaining Service Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [backend-smoke-tests]
    if: github.ref == 'refs/heads/main' || github.event.inputs.branch == 'main' || github.event.inputs.branch == ''

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5444:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache Rust dependencies (read-only from smoke tests)
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
        key: ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-${{ hashFiles('backend/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5444/econ_graph_test

    - name: Run backend remaining service tests
      run: cargo test --lib -- --test-threads=2 --nocapture services::search_service services::series_service services::comprehensive_series_catalog::tests services::series_discovery::boc::tests::test_discover_boc_series_integration services::series_discovery::boe::tests::test_discover_boe_series_integration services::series_discovery::boe::tests::test_fetch_boe_data services::series_discovery::boj::tests::test_discover_boj_series_integration services::series_discovery::boj::tests::test_fetch_boj_data services::series_discovery::ecb::tests::test_discover_ecb_series_integration services::series_discovery::ecb::tests::test_fetch_ecb_data services::series_discovery::fhfa::tests::test_fhfa_hpi_data_structure services::series_discovery::ilo::tests::test_discover_ilo_series_integration services::series_discovery::oecd::tests::test_discover_oecd_series_integration services::series_discovery::oecd::tests::test_fetch_oecd_data services::series_discovery::rba::tests::test_discover_rba_series_integration services::series_discovery::snb::tests::test_discover_snb_series_integration services::series_discovery::unstats::tests::test_discover_unstats_series_integration services::series_discovery::wto::tests::test_discover_wto_series_integration services::series_discovery::wto::tests::test_fetch_wto_data
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5444/econ_graph_test


  frontend-tests:
    name: Frontend Tests (React)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: Check TypeScript compilation
      run: npm run build
      working-directory: frontend

    - name: Run frontend tests
      run: npm test -- --coverage --watchAll=false --maxWorkers=2 --forceExit
      working-directory: frontend
      env:
        CI: true
        NODE_ENV: test
        NODE_OPTIONS: '--max_old_space_size=4096'

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: frontend/coverage
        flags: frontend
        name: frontend-coverage

  backend-integration-tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [backend-smoke-tests, backend-models-basic-tests, backend-models-advanced-tests, backend-crawler-unit-tests, backend-crawler-integration-tests, backend-queue-basic-tests, backend-queue-advanced-tests, backend-global-analysis-basic-tests, backend-global-analysis-advanced-tests, backend-series-discovery-basic-tests, backend-series-discovery-integration-tests, backend-auth-integration-tests, backend-collaboration-integration-tests, backend-remaining-service-tests]
    if: github.ref == 'refs/heads/main' || github.event.inputs.branch == 'main' || github.event.inputs.branch == ''

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache Rust dependencies (read-only from smoke tests)
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
        key: ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-${{ hashFiles('backend/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-
          ${{ runner.os }}-shared-cargo-

    - name: Setup database
      run: |
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

    - name: Build backend
      run: cargo build --release
      working-directory: backend

    - name: Run backend integration tests
      run: cargo test --release integration_tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

    - name: Run backend e2e tests with testcontainers
      run: cargo test --release e2e_tests --lib
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

  frontend-integration-tests:
    name: Frontend Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [frontend-tests]
    if: github.ref == 'refs/heads/main' || github.event.inputs.branch == 'main' || github.event.inputs.branch == ''

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: Build frontend
      run: npm run build
      working-directory: frontend

    - name: Run frontend integration tests
      run: npm test -- --testNamePattern="End-to-End" --watchAll=false --coverage=false
      working-directory: frontend
      env:
        NODE_ENV: test
        REACT_APP_GRAPHQL_ENDPOINT: http://localhost:8080/graphql

  comprehensive-e2e:
    name: Comprehensive End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-integration-tests, frontend-integration-tests]
    if: github.ref == 'refs/heads/main' || github.event.inputs.branch == 'main' || github.event.inputs.branch == ''

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Cache Rust dependencies (read-only from smoke tests)
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
        key: ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-${{ hashFiles('backend/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-shared-cargo-${{ hashFiles('backend/Cargo.lock') }}-
          ${{ runner.os }}-shared-cargo-

    - name: Install diesel CLI
      run: |
        if ! command -v diesel &> /dev/null; then
          cargo install diesel_cli --no-default-features --features postgres
        fi
      working-directory: backend

    - name: Setup test database
      run: |
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5433/econ_graph_test

    - name: Build backend for e2e tests
      run: cargo build --release
      working-directory: backend

    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: Run comprehensive e2e test suite
      run: |
        echo "🚀 Running Comprehensive End-to-End Tests"
        echo "========================================="

        # Run backend e2e tests with testcontainers
        echo "📋 Running backend e2e tests..."
        cargo test --release e2e_tests --lib --verbose

        echo "✅ Backend e2e tests completed"

        # Run frontend integration tests
        echo "📋 Running frontend integration tests..."
        cd ../frontend
        npm test -- --testNamePattern="End-to-End" --watchAll=false --verbose

        echo "✅ Frontend integration tests completed"
        echo "🎉 All comprehensive e2e tests passed!"
      working-directory: backend
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5433/econ_graph_test
        NODE_ENV: test
        REACT_APP_GRAPHQL_ENDPOINT: http://localhost:8080/graphql
        RUST_LOG: info

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run Rust security audit
      run: $HOME/.cargo/bin/cargo audit
      working-directory: backend

    - name: Setup Node.js for npm audit
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: Run npm security audit
      run: npm audit --audit-level moderate
      working-directory: frontend

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-smoke-tests]
    if: github.ref == 'refs/heads/main' || github.event.inputs.branch == 'main' || github.event.inputs.branch == ''

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: econ-graph-backend:test

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: econ-graph-frontend:test

  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Check Rust code formatting
      run: cargo fmt --all -- --check
      working-directory: backend

    - name: Run Rust linting
      run: cargo clippy --all-targets --all-features -- -D warnings -A unused_imports -A dead_code -A clippy::empty_line_after_doc_comments -A clippy::explicit_auto_deref -A clippy::unused_enumerate_index -A clippy::manual_range_contains -A clippy::unnecessary_map_or -A clippy::inherent_to_string -A clippy::too_many_arguments -A clippy::uninlined_format_args -A clippy::needless_borrow -A unused_variables -A clippy::if_same_then_else -A clippy::assertions_on_constants -A clippy::useless_vec -A clippy::overly_complex_bool_expr -A clippy::manual_clamp -A clippy::upper_case_acronyms -A unused_must_use -A unused_mut -A clippy::derivable_impls
      working-directory: backend

    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: Run ESLint
      run: npm run lint
      working-directory: frontend
      continue-on-error: true

    - name: Check TypeScript types
      run: npx tsc --noEmit
      working-directory: frontend

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Install license-checker
      run: npm install -g license-checker

    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: 🔍 Check Backend License Compliance
      run: |
        echo "🔍 Checking backend license compliance with cargo-deny..."
        $HOME/.cargo/bin/cargo deny check licenses
        echo "✅ Backend license compliance check passed"
      working-directory: backend

    - name: 🔍 Check Frontend License Compliance
      run: |
        echo "🔍 Checking frontend license compliance with license-checker..."
        license-checker --config .license-checker.json
        echo "✅ Frontend license compliance check passed"
      working-directory: frontend

    - name: 📋 Generate License Report
      run: |
        echo "📋 Generating comprehensive license report..."
        echo "=============================================="

        echo "Backend Dependencies (Rust):"
        echo "----------------------------"
        cargo deny check licenses --format json > backend-licenses.json || true
        echo "Backend license check completed"

        echo ""
        echo "Frontend Dependencies (Node.js):"
        echo "--------------------------------"
        license-checker --config .license-checker.json --json > frontend-licenses.json || true
        echo "Frontend license check completed"

        echo ""
        echo "✅ License compliance check completed successfully"
      working-directory: frontend

    - name: Upload license reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: license-compliance-reports-${{ github.sha }}
        path: |
          backend-licenses.json
          frontend-licenses.json
        retention-days: 30
