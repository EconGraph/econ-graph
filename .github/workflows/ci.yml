name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

jobs:
  backend-tests:
    name: Backend Tests (Rust)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('backend/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install diesel CLI
      run: cargo install diesel_cli --no-default-features --features postgres
      working-directory: backend

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for postgres..."
          sleep 2
        done

    - name: Setup database
      run: |
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

    - name: Check Rust formatting
      run: cargo fmt --all -- --check
      working-directory: backend

    - name: Run Clippy (linting)
      run: cargo clippy --all-targets --all-features -- -D warnings -A unused_imports -A dead_code -A clippy::empty_line_after_doc_comments -A clippy::explicit_auto_deref -A clippy::unused_enumerate_index -A clippy::manual_range_contains -A clippy::unnecessary_map_or -A clippy::inherent_to_string -A clippy::too_many_arguments -A clippy::uninlined_format_args -A clippy::needless_borrow -A unused_variables -A clippy::if_same_then_else -A clippy::assertions_on_constants -A clippy::useless_vec -A clippy::overly_complex_bool_expr -A clippy::manual_clamp -A clippy::upper_case_acronyms -A unused_must_use -A unused_mut -A clippy::derivable_impls
      working-directory: backend

    - name: Build backend
      run: cargo build --verbose
      working-directory: backend

    - name: Run backend tests
      run: cargo test --verbose
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

  frontend-tests:
    name: Frontend Tests (React)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: Check TypeScript compilation
      run: npm run build
      working-directory: frontend

    - name: Run frontend tests
      run: npm test -- --coverage --watchAll=false --maxWorkers=2 --forceExit --testPathIgnorePatterns="InteractiveChart|e2e-user-workflows" --passWithNoTests
      working-directory: frontend
      env:
        CI: true
        NODE_ENV: test
        NODE_OPTIONS: '--max_old_space_size=4096'

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: frontend/coverage
        flags: frontend
        name: frontend-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('backend/Cargo.lock') }}

    - name: Install diesel CLI
      run: cargo install diesel_cli --no-default-features --features postgres
      working-directory: backend

    - name: Setup database
      run: |
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

    - name: Build backend
      run: cargo build --release
      working-directory: backend

    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: Build frontend
      run: npm run build
      working-directory: frontend

    - name: Run backend integration tests
      run: cargo test --release integration_tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

    - name: Run backend e2e tests with testcontainers
      run: cargo test --release e2e_tests --lib
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

    - name: Run frontend integration tests
      run: npm test src/__tests__/e2e-integration.test.tsx -- --watchAll=false --coverage=false
      working-directory: frontend
      env:
        NODE_ENV: test
        REACT_APP_GRAPHQL_ENDPOINT: http://localhost:8080/graphql

  comprehensive-e2e:
    name: Comprehensive End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('backend/Cargo.lock') }}

    - name: Install diesel CLI
      run: cargo install diesel_cli --no-default-features --features postgres
      working-directory: backend

    - name: Setup test database
      run: |
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5433/econ_graph_test

    - name: Build backend for e2e tests
      run: cargo build --release
      working-directory: backend

    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: Run comprehensive e2e test suite
      run: |
        echo "ðŸš€ Running Comprehensive End-to-End Tests"
        echo "========================================="

        # Run backend e2e tests with testcontainers
        echo "ðŸ“‹ Running backend e2e tests..."
        cargo test --release e2e_tests --lib --verbose

        echo "âœ… Backend e2e tests completed"

        # Run frontend integration tests
        echo "ðŸ“‹ Running frontend integration tests..."
        cd ../frontend
        npm test -- --testNamePattern="End-to-End" --watchAll=false --verbose

        echo "âœ… Frontend integration tests completed"
        echo "ðŸŽ‰ All comprehensive e2e tests passed!"
      working-directory: backend
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5433/econ_graph_test
        NODE_ENV: test
        REACT_APP_GRAPHQL_ENDPOINT: http://localhost:8080/graphql
        RUST_LOG: info

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-audit-${{ hashFiles('backend/Cargo.lock') }}

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run Rust security audit
      run: cargo audit
      working-directory: backend

    - name: Setup Node.js for npm audit
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: Run npm security audit
      run: npm audit --audit-level moderate
      working-directory: frontend

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: econ-graph-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: econ-graph-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('backend/Cargo.lock') }}

    - name: Check Rust code formatting
      run: cargo fmt --all -- --check
      working-directory: backend

    - name: Run Rust linting
      run: cargo clippy --all-targets --all-features -- -D warnings -A unused_imports -A dead_code -A clippy::empty_line_after_doc_comments -A clippy::explicit_auto_deref -A clippy::unused_enumerate_index -A clippy::manual_range_contains -A clippy::unnecessary_map_or -A clippy::inherent_to_string -A clippy::too_many_arguments -A clippy::uninlined_format_args -A clippy::needless_borrow -A unused_variables -A clippy::if_same_then_else -A clippy::assertions_on_constants -A clippy::useless_vec -A clippy::overly_complex_bool_expr -A clippy::manual_clamp -A clippy::upper_case_acronyms -A unused_must_use -A unused_mut -A clippy::derivable_impls
      working-directory: backend

    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: Run ESLint
      run: npm run lint
      working-directory: frontend
      continue-on-error: true

    - name: Check TypeScript types
      run: npx tsc --noEmit
      working-directory: frontend
