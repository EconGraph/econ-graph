name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run CI on (leave empty for current branch)'
        required: false
        default: ''
        type: string

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

jobs:
  test-diesel-cache:
    name: Test Diesel Cache (Manual)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
        key: ${{ runner.os }}-diesel-test-v1
        restore-keys: |
          ${{ runner.os }}-diesel-test-

    - name: Install and test diesel CLI
      run: |
        echo "Current PATH: $PATH"
        echo "CARGO_HOME: $CARGO_HOME"
        echo "Looking for cargo..."
        which cargo || echo "cargo not found in PATH"
        ls -la $HOME/.cargo/bin/ || echo "~/.cargo/bin does not exist"
        echo "Using full path to cargo..."
        $HOME/.cargo/bin/cargo --version
        echo "Installing diesel_cli..."
        $HOME/.cargo/bin/cargo install diesel_cli --no-default-features --features postgres --verbose
        echo "Verifying installation..."
        which diesel
        $HOME/.cargo/bin/diesel --version
        echo "PATH: $PATH"
        echo "Testing diesel setup..."
        $HOME/.cargo/bin/diesel setup
        echo "Testing diesel migration..."
        $HOME/.cargo/bin/diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test
        PATH: $HOME/.cargo/bin:$PATH

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

  grafana-dashboard-validation:
    name: Grafana Dashboard Validation
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't gate other jobs on this
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup validation tools
      run: |
        # Install jq for JSON validation
        sudo apt-get update
        sudo apt-get install -y jq

        # Install yq for YAML validation
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq

    - name: Make validation script executable
      run: chmod +x scripts/test-grafana-dashboards.sh

    - name: 🔍 JSON Syntax Validation
      run: ./scripts/test-grafana-dashboards.sh --step=json-syntax
      continue-on-error: true

    - name: 🏗️ Dashboard Structure Validation
      run: ./scripts/test-grafana-dashboards.sh --step=dashboard-structure
      continue-on-error: true

    - name: 🔗 Datasource Consistency Validation
      run: ./scripts/test-grafana-dashboards.sh --step=datasource-consistency
      continue-on-error: true

    - name: 📊 PromQL Query Validation
      run: ./scripts/test-grafana-dashboards.sh --step=promql-queries
      continue-on-error: true

    - name: 📝 LogQL Query Validation
      run: ./scripts/test-grafana-dashboards.sh --step=logql-queries
      continue-on-error: true

    - name: 📋 ConfigMap Structure Validation
      run: ./scripts/test-grafana-dashboards.sh --step=configmap-structure
      continue-on-error: true

    - name: 🔧 Kubernetes Deployment Validation
      run: ./scripts/test-grafana-dashboards.sh --step=k8s-deployment
      continue-on-error: true

    - name: 🎯 Complete Dashboard Validation
      run: ./scripts/test-grafana-dashboards.sh
      continue-on-error: true

    - name: Upload validation results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: grafana-validation-results-${{ github.sha }}
        path: |
          grafana-dashboards/
          k8s/monitoring/grafana-*.yaml
        retention-days: 30

  backend-smoke-tests:
    name: Backend Smoke Tests (Fast)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('backend/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check Rust formatting
      run: cargo fmt --all -- --check
      working-directory: backend

    - name: Run Clippy (linting)
      run: cargo clippy --all-targets --all-features -- -D warnings -A unused_imports -A dead_code -A clippy::empty_line_after_doc_comments -A clippy::explicit_auto_deref -A clippy::unused_enumerate_index -A clippy::manual_range_contains -A clippy::unnecessary_map_or -A clippy::inherent_to_string -A clippy::too_many_arguments -A clippy::uninlined_format_args -A clippy::needless_borrow -A unused_variables -A clippy::if_same_then_else -A clippy::assertions_on_constants -A clippy::useless_vec -A clippy::overly_complex_bool_expr -A clippy::manual_clamp -A clippy::upper_case_acronyms -A unused_must_use -A unused_mut -A clippy::derivable_impls
      working-directory: backend

    - name: Build backend
      run: cargo build --verbose
      working-directory: backend

    - name: Run fast unit tests (no database)
      run: cargo test --lib -- --test-threads=4 --nocapture config auth::services metrics
      working-directory: backend
      env:
        RUST_LOG: warn




  backend-database-tests:
    name: Backend Database Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [backend-smoke-tests]

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('backend/Cargo.lock') }}

    - name: Install diesel CLI
      run: cargo install diesel_cli --no-default-features --features postgres
      working-directory: backend

    - name: Setup database
      run: |
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

    - name: Run backend database tests
      run: cargo test --lib -- --test-threads=2 --nocapture models::data_source models::economic_series models::data_point models::crawl_queue models::search
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

  backend-service-tests:
    name: Backend Service Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [backend-smoke-tests]

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('backend/Cargo.lock') }}

    - name: Install diesel CLI
      run: cargo install diesel_cli --no-default-features --features postgres
      working-directory: backend

    - name: Setup database
      run: |
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5433/econ_graph_test

    - name: Run backend service tests
      run: cargo test --lib -- --test-threads=2 --nocapture services::queue_service services::global_analysis_service services::crawler services::search_service services::series_service services::collaboration_service auth::integration_tests auth::comprehensive_integration_tests collaboration_integration_tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5433/econ_graph_test


  frontend-tests:
    name: Frontend Tests (React)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: Check TypeScript compilation
      run: npm run build
      working-directory: frontend

    - name: Run frontend tests
      run: npm test -- --coverage --watchAll=false --maxWorkers=2 --forceExit
      working-directory: frontend
      env:
        CI: true
        NODE_ENV: test
        NODE_OPTIONS: '--max_old_space_size=4096'

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: frontend/coverage
        flags: frontend
        name: frontend-coverage

  backend-integration-tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [backend-smoke-tests, backend-database-tests, backend-service-tests]

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('backend/Cargo.lock') }}

    - name: Install diesel CLI
      run: cargo install diesel_cli --no-default-features --features postgres
      working-directory: backend

    - name: Setup database
      run: |
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

    - name: Build backend
      run: cargo build --release
      working-directory: backend

    - name: Run backend integration tests
      run: cargo test --release integration_tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

    - name: Run backend e2e tests with testcontainers
      run: cargo test --release e2e_tests --lib
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

  frontend-integration-tests:
    name: Frontend Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: Build frontend
      run: npm run build
      working-directory: frontend

    - name: Run frontend integration tests
      run: npm test -- --testNamePattern="End-to-End" --watchAll=false --coverage=false
      working-directory: frontend
      env:
        NODE_ENV: test
        REACT_APP_GRAPHQL_ENDPOINT: http://localhost:8080/graphql

  comprehensive-e2e:
    name: Comprehensive End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-integration-tests, frontend-integration-tests]

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('backend/Cargo.lock') }}

    - name: Install diesel CLI
      run: cargo install diesel_cli --no-default-features --features postgres
      working-directory: backend

    - name: Setup test database
      run: |
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5433/econ_graph_test

    - name: Build backend for e2e tests
      run: cargo build --release
      working-directory: backend

    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: Run comprehensive e2e test suite
      run: |
        echo "🚀 Running Comprehensive End-to-End Tests"
        echo "========================================="

        # Run backend e2e tests with testcontainers
        echo "📋 Running backend e2e tests..."
        cargo test --release e2e_tests --lib --verbose

        echo "✅ Backend e2e tests completed"

        # Run frontend integration tests
        echo "📋 Running frontend integration tests..."
        cd ../frontend
        npm test -- --testNamePattern="End-to-End" --watchAll=false --verbose

        echo "✅ Frontend integration tests completed"
        echo "🎉 All comprehensive e2e tests passed!"
      working-directory: backend
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5433/econ_graph_test
        NODE_ENV: test
        REACT_APP_GRAPHQL_ENDPOINT: http://localhost:8080/graphql
        RUST_LOG: info

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-audit-${{ hashFiles('backend/Cargo.lock') }}

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run Rust security audit
      run: cargo audit
      working-directory: backend

    - name: Setup Node.js for npm audit
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: Run npm security audit
      run: npm audit --audit-level moderate
      working-directory: frontend

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-integration-tests, frontend-integration-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: econ-graph-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: econ-graph-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('backend/Cargo.lock') }}

    - name: Check Rust code formatting
      run: cargo fmt --all -- --check
      working-directory: backend

    - name: Run Rust linting
      run: cargo clippy --all-targets --all-features -- -D warnings -A unused_imports -A dead_code -A clippy::empty_line_after_doc_comments -A clippy::explicit_auto_deref -A clippy::unused_enumerate_index -A clippy::manual_range_contains -A clippy::unnecessary_map_or -A clippy::inherent_to_string -A clippy::too_many_arguments -A clippy::uninlined_format_args -A clippy::needless_borrow -A unused_variables -A clippy::if_same_then_else -A clippy::assertions_on_constants -A clippy::useless_vec -A clippy::overly_complex_bool_expr -A clippy::manual_clamp -A clippy::upper_case_acronyms -A unused_must_use -A unused_mut -A clippy::derivable_impls
      working-directory: backend

    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: Run ESLint
      run: npm run lint
      working-directory: frontend
      continue-on-error: true

    - name: Check TypeScript types
      run: npx tsc --noEmit
      working-directory: frontend

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('backend/Cargo.lock') }}

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Install license-checker
      run: npm install -g license-checker

    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: 🔍 Check Backend License Compliance
      run: |
        echo "🔍 Checking backend license compliance with cargo-deny..."
        cargo deny check licenses
        echo "✅ Backend license compliance check passed"
      working-directory: backend

    - name: 🔍 Check Frontend License Compliance
      run: |
        echo "🔍 Checking frontend license compliance with license-checker..."
        license-checker --config .license-checker.json
        echo "✅ Frontend license compliance check passed"
      working-directory: frontend

    - name: 📋 Generate License Report
      run: |
        echo "📋 Generating comprehensive license report..."
        echo "=============================================="

        echo "Backend Dependencies (Rust):"
        echo "----------------------------"
        cargo deny check licenses --format json > backend-licenses.json || true
        echo "Backend license check completed"

        echo ""
        echo "Frontend Dependencies (Node.js):"
        echo "--------------------------------"
        license-checker --config .license-checker.json --json > frontend-licenses.json || true
        echo "Frontend license check completed"

        echo ""
        echo "✅ License compliance check completed successfully"
      working-directory: frontend

    - name: Upload license reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: license-compliance-reports-${{ github.sha }}
        path: |
          backend-licenses.json
          frontend-licenses.json
        retention-days: 30
