name: Core CI Tests

on:
  push:
    branches: [ main, develop, optimize/ci-core-primary ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - 'README.md'
      - 'LICENSE'
      - '.gitignore'
      - '.github/workflows/README.md'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - 'README.md'
      - 'LICENSE'
      - '.gitignore'
      - '.github/workflows/README.md'
  workflow_dispatch:
    inputs:
      run_e2e_tests:
        description: 'Run E2E tests (disabled by default)'
        required: false
        default: false
        type: boolean
      e2e_test_suite:
        description: 'E2E Test Suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - core
          - global-analysis
          - professional-analysis
          - comprehensive
          - mobile-core
          - mobile-global-analysis
          - mobile-professional-analysis
          - mobile-comprehensive
      branch:
        description: 'Branch to run CI on (leave empty for current branch)'
        required: false
        default: ''
        type: string

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: postgresql://postgres:password@localhost:5432/econ_graph_test

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      frontend_only: ${{ steps.filter.outputs.frontend == 'true' && steps.filter.outputs.backend == 'false' }}
    steps:
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          frontend:
            - 'frontend/**'
            - 'admin-frontend/**'
          backend:
            - 'backend/**'
            - 'chart-api-service/**'
            - 'ci/**'
            - '.github/**'
            - 'k8s/**'
            - 'terraform/**'
            - 'scripts/**'
            - 'docker-compose.yml'
            - 'package.json'
  backend-build-cache:
    name: Backend Build Cache
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.frontend_only != 'true'
    timeout-minutes: 90

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install shared tools
      run: |
        echo "Installing shared tools..."
        echo "Current PATH: $PATH"
        echo "CARGO_HOME: $CARGO_HOME"
        echo "HOME: $HOME"

        # Set up cargo bin directory and PATH
        export CARGO_BIN_DIR="$HOME/.cargo/bin"
        export PATH="$CARGO_BIN_DIR:$PATH"

        # Install diesel_cli
        echo "Installing diesel_cli..."
        cargo install diesel_cli --no-default-features --features postgres --verbose --force

        # Install cargo-audit
        echo "Installing cargo-audit..."
        cargo install cargo-audit --verbose --force

        # Install cargo-deny
        echo "Installing cargo-deny..."
        cargo install cargo-deny --verbose --force

        # Verify installations
        echo "Verifying installations..."
        ls -la "$CARGO_BIN_DIR/"
        diesel --version || echo "diesel not found"
        cargo-audit --version || echo "cargo-audit not found"
        cargo-deny --version || echo "cargo-deny not found"
      working-directory: backend

    - name: Build backend
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo build --verbose
      working-directory: backend

  backend-migration-validation-tests:
    name: Backend Migration Validation Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Run migration order validation
      run: |
        cd backend
        python3 scripts/check_migration_order.py

    - name: Test migration validation with duplicate timestamps
      run: |
        cd backend
        # Create a temporary migration with duplicate timestamp for testing
        mkdir -p migrations/2025-02-01-000001_duplicate_migration_test
        echo "-- Test migration" > migrations/2025-02-01-000001_duplicate_migration_test/up.sql
        echo "-- Test migration down" > migrations/2025-02-01-000001_duplicate_migration_test/down.sql

        # This should fail because the timestamp duplicates an existing migration
        if python3 scripts/check_migration_order.py; then
          echo "❌ Migration validation should have failed but didn't"
          exit 1
        else
          echo "✅ Migration validation correctly detected duplicate timestamps"
        fi

        # Clean up test migration
        rm -rf migrations/2025-02-01-000001_duplicate_migration_test

  backend-smoke-tests:
    name: Backend Smoke Tests (Fast)
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [backend-build-cache]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Check Rust formatting
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo fmt --all -- --check
      working-directory: backend

    - name: Run Clippy (linting)
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo clippy --all-targets --all-features -- -D warnings -A unused_imports -A dead_code -A clippy::empty_line_after_doc_comments -A clippy::explicit_auto_deref -A clippy::unused_enumerate_index -A clippy::manual_range_contains -A clippy::unnecessary_map_or -A clippy::inherent_to_string -A clippy::too_many_arguments -A clippy::uninlined_format_args -A clippy::needless_borrow -A unused_variables -A clippy::if_same_then_else -A clippy::assertions_on_constants -A clippy::useless_vec -A clippy::overly_complex_bool_expr -A clippy::manual_clamp -A clippy::upper_case_acronyms -A unused_must_use -A unused_mut -A clippy::derivable_impls
      working-directory: backend

    - name: Run fast unit tests (no database)
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=4 --nocapture config auth::integration_tests::test_user_response_serialization auth::integration_tests::test_request_validation auth::integration_tests::test_password_hashing auth::integration_tests::test_model_deserialization auth::comprehensive_integration_tests::test_password_security metrics mcp_server::tests::test_get_available_tools mcp_server::tests::test_get_available_resources
      working-directory: backend
      env:
        RUST_LOG: warn

  chart-api-integration-tests:
    name: Chart API Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [backend-smoke-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: chart-api-service/package-lock.json

    - name: Install chart API dependencies
      working-directory: chart-api-service
      run: npm ci

    - name: Build chart API service
      working-directory: chart-api-service
      run: npm run build

    - name: Start chart API service
      working-directory: chart-api-service
      run: |
        npm start &
        sleep 10
        curl -f http://localhost:3001/health || exit 1
      env:
        PORT: 3001

    - name: Run chart API tests
      working-directory: chart-api-service
      run: npm test

    - name: Test chart API endpoints
      run: |
        # Test health endpoint
        curl -f http://localhost:3001/health

        # Test chart generation endpoint
        curl -X POST http://localhost:3001/api/chart \
          -H "Content-Type: application/json" \
          -d '{"chartType": "line", "data": [{"x": "2023-01", "y": 100}], "title": "Test Chart"}' \
          -f || echo "Chart API test completed"

  backend-mcp-integration-tests:
    name: Backend MCP Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [backend-smoke-tests, chart-api-integration-tests]

    services:
      postgres:
        image: postgres:18-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5445:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install diesel CLI
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5445/econ_graph_test

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: chart-api-service/package-lock.json

    - name: Install chart API dependencies
      working-directory: chart-api-service
      run: npm ci

    - name: Build chart API service
      working-directory: chart-api-service
      run: npm run build

    - name: Start chart API service
      working-directory: chart-api-service
      run: |
        npm start &
        sleep 10
        curl -f http://localhost:3001/health || exit 1
      env:
        PORT: 3001

    - name: Start backend service
      working-directory: backend
      run: |
        cargo build --release
        ./target/release/econ-graph-backend &
        sleep 15
        curl -f http://localhost:9877/health || exit 1
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5445/econ_graph_test
        BACKEND_PORT: 9877
        CHART_API_SERVICE_URL: http://localhost:3001/api/chart

    - name: Run MCP server integration tests
      working-directory: backend
      run: cargo test --test mcp_server_integration_tests -- --nocapture
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5445/econ_graph_test
        CHART_API_SERVICE_URL: http://localhost:3001/api/chart

  backend-models-basic-tests:
    name: Backend Models Basic Tests
    runs-on: ubuntu-latest
    timeout-minutes: 120
    needs: [backend-smoke-tests]

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Debug cargo bin directory after cache restoration
      run: |
        echo "=== DEBUGGING CARGO BIN DIRECTORY ==="
        echo "HOME: $HOME"
        echo "PATH: $PATH"
        echo "CARGO_HOME: $CARGO_HOME"
        ls -la "$HOME/.cargo/bin/" || echo "cargo bin directory not found"
        which cargo || echo "cargo not in PATH"
        which diesel || echo "diesel not in PATH"
        echo "=== END DEBUGGING ==="

    - name: Install diesel CLI
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend

    - name: Run backend models basic tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        echo "=== RUST ENVIRONMENT DEBUGGING ==="
        rustc --version || echo "rustc command failed"
        cargo --version || echo "cargo command failed"
        cc --version || echo "cc command failed"
        echo "=== END RUST ENVIRONMENT DEBUGGING ==="
        cargo test --lib -- --test-threads=2 --nocapture models::data_source::tests::simple_tests models::economic_series::tests::simple_tests models::data_point::tests::simple_tests models::crawl_queue::tests::simple_tests models::search::tests::simple_tests
      working-directory: backend

  backend-models-advanced-tests:
    name: Backend Models Advanced Tests
    runs-on: ubuntu-latest
    timeout-minutes: 120
    needs: [backend-smoke-tests]

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install diesel CLI
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5433/econ_graph_test

    - name: Run backend models advanced tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture models::data_source::tests models::economic_series::tests models::data_point::tests models::crawl_queue::tests models::search::tests models::series_metadata::tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5433/econ_graph_test

  backend-crawler-unit-tests:
    name: Backend Crawler Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [backend-build-cache]

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5434:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install diesel CLI
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5434/econ_graph_test

    - name: Run backend crawler unit tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture services::crawler::tests::test_catalog_downloader_creation services::crawler::tests::test_series_downloader_creation services::crawler::simple_crawler_service::tests services::crawler::enhanced_crawler_scheduler::tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5434/econ_graph_test

  backend-crawler-integration-tests:
    name: Backend Crawler Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [backend-build-cache]

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5435:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install diesel CLI
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5435/econ_graph_test

    - name: Run backend crawler integration tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture services::crawler::tests::test_crawler_with_database services::crawler::tests::test_file_crawling_with_series_downloader services::crawler::tests::test_file_url_crawling services::crawler::tests::test_file_url_error_handling services::crawler::tests::test_file_url_with_special_characters services::crawler::tests::test_multiple_file_urls
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5435/econ_graph_test

  backend-queue-basic-tests:
    name: Backend Queue Basic Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [backend-build-cache]

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5436:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install diesel CLI
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5436/econ_graph_test

    - name: Run backend queue basic tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture services::queue_service::tests::test_get_and_lock_next_item services::queue_service::tests::test_queue_item_locking_and_unlocking services::queue_service::tests::test_queue_status_updates services::queue_service::tests::test_queue_retry_logic services::queue_service::tests::test_queue_skip_locked_functionality
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5436/econ_graph_test

  backend-queue-advanced-tests:
    name: Backend Queue Advanced Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [backend-build-cache]

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5437:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install diesel CLI
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5437/econ_graph_test

    - name: Run backend queue advanced tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture services::queue_service::tests::test_queue_concurrent_access services::queue_service::tests::test_queue_statistics_with_processing_time services::queue_service::tests::test_queue_statistics_empty services::queue_service::tests::test_queue_error_handling services::queue_service::tests::test_queue_scheduled_items services::queue_service::tests::test_get_stuck_items services::queue_service::tests::test_unlock_stuck_items services::queue_service::tests::test_mark_item_failed services::queue_service::tests::test_cleanup_old_queue_items
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5437/econ_graph_test

  backend-global-analysis-basic-tests:
    name: Backend Global Analysis Basic Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [backend-build-cache]

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5438:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install diesel CLI
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5438/econ_graph_test

    - name: Run backend global analysis basic tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture services::global_analysis_service::tests::test_get_countries_with_economic_data services::global_analysis_service::tests::test_get_global_events_with_impacts services::global_analysis_service::tests::test_get_global_events_with_filters services::global_analysis_service::tests::test_direct_event_query services::global_analysis_service::tests::test_event_insertion_only services::global_analysis_service::tests::test_trade_partners_retrieval
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5438/econ_graph_test

  backend-global-analysis-advanced-tests:
    name: Backend Global Analysis Advanced Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [backend-build-cache]

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5439:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install diesel CLI
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5439/econ_graph_test

    - name: Run backend global analysis advanced tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture services::global_analysis_service::tests::test_get_correlation_network services::global_analysis_service::tests::test_calculate_country_correlations services::global_analysis_service::tests::test_calculate_economic_health_score services::global_analysis_service::tests::test_correlation_network_centrality_calculation services::global_analysis_service::tests::test_error_handling_database_connection_failure
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5439/econ_graph_test

  backend-series-discovery-basic-tests:
    name: Backend Series Discovery Basic Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [backend-build-cache]

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5440:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install diesel CLI
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5440/econ_graph_test

    - name: Run backend series discovery basic tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture services::series_discovery::boc::tests::test_boc_data_source_creation services::series_discovery::boe::tests::test_boe_data_source_creation services::series_discovery::boj::tests::test_boj_data_source_creation services::series_discovery::ecb::tests::test_ecb_data_source_creation services::series_discovery::fhfa::tests::test_fhfa_data_source_creation services::series_discovery::ilo::tests::test_ilo_data_source_creation services::series_discovery::oecd::tests::test_oecd_data_source_creation services::series_discovery::rba::tests::test_rba_data_source_creation services::series_discovery::snb::tests::test_snb_data_source_creation services::series_discovery::unstats::tests::test_unstats_data_source_creation services::series_discovery::wto::tests::test_wto_data_source_creation
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5440/econ_graph_test

  backend-series-discovery-integration-tests:
    name: Backend Series Discovery Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [backend-build-cache]

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5441:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install diesel CLI
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5441/econ_graph_test

    - name: Run backend series discovery integration tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture services::series_discovery::boc::tests::test_discover_series services::series_discovery::boe::tests::test_discover_series services::series_discovery::boj::tests::test_discover_series services::series_discovery::ecb::tests::test_discover_series services::series_discovery::fhfa::tests::test_discover_series services::series_discovery::ilo::tests::test_discover_series services::series_discovery::oecd::tests::test_discover_series services::series_discovery::rba::tests::test_discover_series services::series_discovery::snb::tests::test_discover_series services::series_discovery::unstats::tests::test_discover_series services::series_discovery::wto::tests::test_discover_series
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5441/econ_graph_test

  backend-auth-integration-tests:
    name: Backend Auth Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [backend-build-cache]

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5442:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install diesel CLI
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5442/econ_graph_test

    - name: Run backend auth integration tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture auth::integration_tests::test_auth_service_creation auth::integration_tests::test_jwt_token_flow auth::integration_tests::test_google_oauth_flow auth::integration_tests::test_facebook_oauth_flow auth::integration_tests::test_email_password_auth auth::integration_tests::test_authentication_failures auth::integration_tests::test_profile_update auth::comprehensive_integration_tests::test_google_oauth_signup_flow auth::comprehensive_integration_tests::test_google_oauth_signin_flow auth::comprehensive_integration_tests::test_facebook_oauth_signup_flow auth::comprehensive_integration_tests::test_facebook_oauth_signin_flow auth::comprehensive_integration_tests::test_email_password_signup_flow auth::comprehensive_integration_tests::test_email_password_signin_flow auth::comprehensive_integration_tests::test_authentication_failure_scenarios auth::comprehensive_integration_tests::test_duplicate_user_scenarios auth::comprehensive_integration_tests::test_user_profile_update auth::comprehensive_integration_tests::test_jwt_token_expiration auth::comprehensive_integration_tests::test_request_validation auth::comprehensive_integration_tests::test_model_serialization
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5442/econ_graph_test

  backend-collaboration-integration-tests:
    name: Backend Collaboration Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [backend-build-cache]

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5443:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install diesel CLI
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5443/econ_graph_test

    - name: Run backend collaboration integration tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture collaboration_integration_tests services::collaboration_service::tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5443/econ_graph_test

  backend-remaining-service-tests:
    name: Backend Remaining Service Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [backend-build-cache]

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5444:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install diesel CLI
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5444/econ_graph_test

    - name: Run backend remaining service tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --lib -- --test-threads=2 --nocapture services::search_service services::series_service services::comprehensive_series_catalog::tests services::series_discovery::boc::tests::test_discover_boc_series_integration services::series_discovery::boe::tests::test_discover_boe_series_integration services::series_discovery::boe::tests::test_fetch_boe_data services::series_discovery::boj::tests::test_discover_boj_series_integration services::series_discovery::boj::tests::test_fetch_boj_data services::series_discovery::ecb::tests::test_discover_ecb_series_integration services::series_discovery::ecb::tests::test_fetch_ecb_data services::series_discovery::fhfa::tests::test_fhfa_hpi_data_structure services::series_discovery::ilo::tests::test_discover_ilo_series_integration services::series_discovery::oecd::tests::test_discover_oecd_series_integration services::series_discovery::oecd::tests::test_fetch_oecd_data services::series_discovery::rba::tests::test_discover_rba_series_integration services::series_discovery::rba::tests::test_fetch_rba_data services::series_discovery::snb::tests::test_discover_snb_series_integration services::series_discovery::snb::tests::test_fetch_snb_data services::series_discovery::unstats::tests::test_discover_unstats_series_integration services::series_discovery::unstats::tests::test_fetch_unstats_data services::series_discovery::wto::tests::test_discover_wto_series_integration services::series_discovery::wto::tests::test_fetch_wto_data
      working-directory: backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5444/econ_graph_test

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: frontend
      run: npm ci

    - name: Run linting
      working-directory: frontend
      run: npm run lint

    - name: Run type checking
      working-directory: frontend
      run: npm run typecheck

    - name: Run tests (parallel)
      working-directory: frontend
      run: npm test -- --coverage --watchAll=false --testPathIgnorePatterns="ChartCollaborationConnected|ChartCollaboration|ProfessionalChart|InteractiveChartWithCollaboration"

    - name: Run problematic tests (serial)
      working-directory: frontend
      run: npm run test:serial -- --testPathPattern="ChartCollaborationConnected|ChartCollaboration|ProfessionalChart|InteractiveChartWithCollaboration" --coverage

  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Run Rust formatting check
      working-directory: backend
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo fmt -- --check

    - name: Run Rust clippy
      working-directory: backend
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo clippy -- -W clippy::all

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Run frontend formatting check
      working-directory: frontend
      run: npm run prettier-check

    - name: Run frontend linting
      working-directory: frontend
      run: npm run lint

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install cargo-audit
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install cargo-audit --force

    - name: Run Rust security audit
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo audit
      working-directory: backend

    - name: Setup Node.js for npm audit
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Run npm security audit
      run: npm audit --audit-level moderate
      working-directory: frontend

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install cargo-deny
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install cargo-deny --force

    - name: Install license-checker
      run: npm install -g license-checker

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: 🔍 Check Backend License Compliance
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        echo "🔍 Checking backend license compliance with cargo-deny..."
        cargo deny check licenses
        echo "✅ Backend license compliance check passed"
      working-directory: backend

    - name: 🔍 Check Frontend License Compliance
      run: |
        echo "🔍 Checking frontend license compliance with license-checker..."
        license-checker --config .license-checker.json
        echo "✅ Frontend license compliance check passed"
      working-directory: frontend

    - name: 📋 Generate License Report
      run: |
        echo "📋 Generating comprehensive license report..."

        # Generate backend license report
        echo "Generating backend license report..."
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo deny check licenses --format json > backend-licenses.json || true
        echo "Backend license check completed"

        # Generate frontend license report
        echo "Generating frontend license report..."
        license-checker --config .license-checker.json --json > frontend-licenses.json || true
        echo "Frontend license check completed"

        echo "✅ License compliance check completed successfully"

    - name: Upload license reports
      uses: actions/upload-artifact@v4
      with:
        name: license-compliance-reports-${{ github.sha }}
        path: |
          backend-licenses.json
          frontend-licenses.json

  backend-integration-tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [backend-smoke-tests]

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install diesel CLI
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend

    - name: Build backend
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo build --verbose
      working-directory: backend

    - name: Run backend integration tests
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo test --package econ-graph-backend --lib -- --test-threads=2 --nocapture integration_tests::tests::test_database_connection_test_during_startup integration_tests::tests::test_database_connection_test_with_invalid_url integration_tests::tests::test_database_authentication_failure integration_tests::tests::test_startup_failure_scenarios integration_tests::tests::test_database_connection_test_performance integration_tests::tests::test_initialize_database_function
      working-directory: backend

  frontend-integration-tests:
    name: Frontend Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: frontend
      run: npm ci

    - name: Run frontend integration tests
      working-directory: frontend
      run: npm test -- --coverage --watchAll=false
      env:
        REACT_APP_GRAPHQL_ENDPOINT: http://localhost:51249/graphql

  e2e-container-build:
    name: Build E2E Test Containers
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [frontend-integration-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build standard E2E container
      run: |
        docker build -f ci/docker/e2e/Dockerfile -t econ-graph-e2e:latest .
        docker save econ-graph-e2e:latest | gzip > e2e-container.tar.gz

    - name: Build mobile E2E container
      run: |
        # Mobile container depends on the standard container being built first
        # Verify the standard container is available
        docker images | grep econ-graph-e2e
        docker build -f ci/docker/e2e/Dockerfile.mobile -t econ-graph-e2e-mobile:latest .
        docker save econ-graph-e2e-mobile:latest | gzip > e2e-mobile-container.tar.gz

    - name: Upload E2E containers
      uses: actions/upload-artifact@v4
      with:
        name: e2e-containers-standard
        path: |
          e2e-container.tar.gz
          e2e-mobile-container.tar.gz
        retention-days: 1

  e2e-container-build-optimized:
    name: Build Optimized E2E Test Containers
    runs-on: ubuntu-latest
    timeout-minutes: 120
    needs: [frontend-integration-tests]
    if: ${{ github.event.inputs.run_e2e_tests == true }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build optimized E2E container
      run: |
        echo "Building optimized E2E container with pre-built backend and frontend..."
        docker build -f ci/docker/e2e/Dockerfile.optimized -t econ-graph-e2e-optimized:latest .
        docker save econ-graph-e2e-optimized:latest | gzip > e2e-container-optimized.tar.gz

    - name: Build optimized mobile E2E container
      run: |
        echo "Building optimized mobile E2E container..."
        # Verify the optimized container is available
        docker images | grep econ-graph-e2e-optimized
        docker build -f ci/docker/e2e/Dockerfile.mobile.optimized -t econ-graph-e2e-mobile-optimized:latest .
        docker save econ-graph-e2e-mobile-optimized:latest | gzip > e2e-mobile-container-optimized.tar.gz

    - name: Upload optimized E2E containers
      uses: actions/upload-artifact@v4
      with:
        name: e2e-containers-optimized
        path: |
          e2e-container-optimized.tar.gz
          e2e-mobile-container-optimized.tar.gz
        retention-days: 1

  e2e-core-tests:
    name: E2E Core Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [backend-smoke-tests, frontend-integration-tests, backend-integration-tests, e2e-container-build-optimized]
    if: ${{ github.event.inputs.run_e2e_tests == true && (github.event.inputs.e2e_test_suite == 'all' || github.event.inputs.e2e_test_suite == 'core' || github.event.inputs.e2e_test_suite == '') }}
    # Note: PostgreSQL environment variables removed to prevent conflicts with DATABASE_URL
    # The DATABASE_URL in Docker containers should handle authentication

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Load CI port configuration
      run: |
        echo "⚠️  TEMPORARY: Using second source of truth (ci-ports.env)"
        echo "TODO: Fix CI to use existing load-env.sh + ports.env system"
        echo "See: GitHub issue #XXX - 'CI should use existing single source of truth'"
        echo "Loading CI port configuration from ci-ports.env..."
        set -a  # automatically export all variables
        source ci-ports.env
        set +a  # stop automatically exporting
        echo "Backend port: $BACKEND_PORT"
        echo "Frontend port: $FRONTEND_PORT"
        echo "Backend URL: $BACKEND_URL"
        echo "Frontend URL: $FRONTEND_URL"
        echo "REACT_APP_GRAPHQL_ENDPOINT: $REACT_APP_GRAPHQL_ENDPOINT"
        echo "REACT_APP_GRAPHQL_URL: $REACT_APP_GRAPHQL_URL"
        echo "REACT_APP_BACKEND_PORT: $REACT_APP_BACKEND_PORT"
        echo "CORS_ALLOWED_ORIGINS: $CORS_ALLOWED_ORIGINS"
        # Export variables for subsequent steps
        echo "BACKEND_PORT=$BACKEND_PORT" >> $GITHUB_ENV
        echo "FRONTEND_PORT=$FRONTEND_PORT" >> $GITHUB_ENV
        echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_ENV
        echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_ENV
        echo "REACT_APP_GRAPHQL_ENDPOINT=$REACT_APP_GRAPHQL_ENDPOINT" >> $GITHUB_ENV
        echo "REACT_APP_API_URL=$REACT_APP_API_URL" >> $GITHUB_ENV
        echo "REACT_APP_GRAPHQL_URL=$REACT_APP_GRAPHQL_URL" >> $GITHUB_ENV
        echo "REACT_APP_BACKEND_PORT=$REACT_APP_BACKEND_PORT" >> $GITHUB_ENV
        echo "CORS_ALLOWED_ORIGINS=$CORS_ALLOWED_ORIGINS" >> $GITHUB_ENV

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install shared tools
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Wait for PostgreSQL
      run: |
        echo "Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "PostgreSQL is ready!"
            break
          fi
          echo "Waiting for PostgreSQL... ($i/30)"
          sleep 2
        done

    - name: Run database migrations
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel migration run
      working-directory: backend

    - name: Download optimized E2E containers
      uses: actions/download-artifact@v4
      with:
        name: e2e-containers-optimized

    - name: Load optimized E2E containers
      run: |
        docker load < e2e-container-optimized.tar.gz
        docker load < e2e-mobile-container-optimized.tar.gz

    # Backend is already built in the optimized container, no need to build it again

    - name: Start services with health checks
      run: |
        # Start both frontend and backend services with proper health checks
        chmod +x scripts/start-services-with-health-checks.sh
        ./scripts/start-services-with-health-checks.sh

        # Wait for frontend to be ready
        for i in {1..30}; do
          if curl -f http://localhost:3000 2>/dev/null; then
            echo "Frontend is ready!"
            break
          fi
          echo "Waiting for frontend... ($i/30)"
          sleep 2
        done

    - name: Run E2E Core Tests
      run: |
        # Verify frontend connectivity and capture both backend and frontend logs during test execution
        chmod +x scripts/verify-frontend-connectivity.sh
        chmod +x scripts/run-e2e-with-backend-logs.sh
        chmod +x scripts/run-e2e-with-frontend-logs.sh
        # Execute E2E tests with proper exit code propagation
        set -e  # Exit on any command failure
        ./scripts/verify-frontend-connectivity.sh ./scripts/run-e2e-with-frontend-logs.sh ./scripts/run-e2e-with-backend-logs.sh docker run --rm \
          --network host \
          -w /app/frontend \
          -e BASE_URL=http://localhost:3000 \
          econ-graph-e2e-optimized:latest \
          npm run test:e2e:core


    - name: Stop services
      if: always()
      run: |
        docker stop backend-server || true
        docker stop frontend-server || true

  e2e-global-analysis-tests:
    name: E2E Global Analysis Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [backend-smoke-tests, frontend-integration-tests, backend-integration-tests, e2e-container-build-optimized]
    if: ${{ github.event.inputs.run_e2e_tests == true && (github.event.inputs.e2e_test_suite == 'all' || github.event.inputs.e2e_test_suite == 'global-analysis' || github.event.inputs.e2e_test_suite == '') }}

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install diesel CLI
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend

    - name: Wait for PostgreSQL to be ready
      run: |
        echo "🔍 Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "✅ PostgreSQL is ready!"
            break
          fi
          echo "⏳ Attempt $i/30: PostgreSQL not ready yet, waiting 2 seconds..."
          sleep 2
        done

        # Additional verification with a simple query
        echo "🔍 Verifying PostgreSQL is fully functional..."
        PGPASSWORD=password psql -h localhost -p 5432 -U postgres -d econ_graph_test -c "SELECT 1;" || {
          echo "❌ PostgreSQL health check failed"
          exit 1
        }
        echo "✅ PostgreSQL is fully functional!"

    - name: Download optimized E2E containers
      uses: actions/download-artifact@v4
      with:
        name: e2e-containers-optimized

    - name: Load optimized E2E containers
      run: |
        docker load < e2e-container-optimized.tar.gz
        docker load < e2e-mobile-container-optimized.tar.gz

    - name: Start services with health checks
      run: |
        # Start both frontend and backend services with proper health checks
        chmod +x scripts/start-services-with-health-checks.sh
        ./scripts/start-services-with-health-checks.sh

        # Wait for frontend to be ready
        for i in {1..30}; do
          if curl -f http://localhost:3000 2>/dev/null; then
            echo "Frontend is ready!"
            break
          fi
          echo "Waiting for frontend... ($i/30)"
          sleep 2
        done

    - name: Run Global Analysis E2E Tests
      run: |
        # Debug: Validate ports before running tests
        echo "🔧 Port Validation Before E2E Tests:"
        echo "  - Checking what ports are listening:"
        netstat -tlnp | grep -E ":(3000|51249|8080|9876)" || echo "    No expected ports found"
        echo "  - Testing URL reachability:"
        curl -f -s --connect-timeout 5 http://localhost:3000 > /dev/null && echo "    ✅ Frontend (3000) reachable" || echo "    ❌ Frontend (3000) NOT reachable"
        curl -f -s --connect-timeout 5 http://localhost:51249/health > /dev/null && echo "    ✅ Backend (51249) reachable" || echo "    ❌ Backend (51249) NOT reachable"
        echo ""

        # Debug: Frontend server detailed analysis
        echo "🔧 Frontend Server Detailed Analysis:"
        echo "  - Testing frontend HTML response:"
        curl -v http://localhost:3000/ 2>&1 | head -20 || echo "    ❌ Cannot get frontend HTML"
        echo "  - Testing frontend static files:"
        curl -f -s --connect-timeout 5 http://localhost:3000/static/js/main.6b919b30.js > /dev/null && echo "    ✅ Frontend JS bundle reachable" || echo "    ❌ Frontend JS bundle NOT reachable"
        echo "  - Testing frontend health endpoint:"
        curl -f -s --connect-timeout 5 http://localhost:3000/health > /dev/null && echo "    ✅ Frontend health endpoint reachable" || echo "    ❌ Frontend health endpoint NOT reachable"
        echo "  - Frontend container status:"
        docker ps --filter name=frontend-server --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" || echo "    No frontend container found"
        echo "  - Frontend container logs (last 20 lines):"
        docker logs --tail 20 frontend-server 2>/dev/null || echo "    Cannot get frontend logs"
        echo ""

        # Verify frontend connectivity and capture both backend and frontend logs during test execution
        chmod +x scripts/verify-frontend-connectivity.sh
        chmod +x scripts/run-e2e-with-backend-logs.sh
        chmod +x scripts/run-e2e-with-frontend-logs.sh
        # Execute E2E tests with proper exit code propagation
        set -e  # Exit on any command failure
        ./scripts/verify-frontend-connectivity.sh ./scripts/run-e2e-with-frontend-logs.sh ./scripts/run-e2e-with-backend-logs.sh docker run --rm \
          --network host \
          -w /app/frontend \
          -e BASE_URL=http://localhost:3000 \
          -e DEBUG="pw:api,pw:browser*" \
          econ-graph-e2e-optimized:latest \
          npm run test:e2e:global-analysis

    - name: Copy Playwright test artifacts from runner filesystem
      if: always()
      run: |
        echo "📋 Copying Playwright test artifacts from runner filesystem..."
        echo "⚠️  FIXED: Playwright artifacts are on the runner, not in containers!"

        # Playwright artifacts are on the runner, not in containers
        # They should be in the frontend directory after the test run
        echo "📋 Current working directory: $(pwd)"
        echo "📋 Contents of current directory:"
        ls -la

        echo "📋 Contents of frontend directory:"
        ls -la frontend/ || echo "No frontend directory found"

        echo "📋 COMPREHENSIVE ARTIFACT SEARCH:"
        echo "================================="

        # Search in frontend directory
        echo "📋 Searching for test-results in frontend directory:"
        find frontend -name "test-results" -type d 2>/dev/null || echo "No test-results directory found"

        echo "📋 Searching for playwright-report in frontend directory:"
        find frontend -name "playwright-report" -type d 2>/dev/null || echo "No playwright-report directory found"

        # Search for individual Playwright files
        echo "📋 Searching for Playwright files (*.webm, *.png, *.md) in frontend directory:"
        find frontend -name "*.webm" -o -name "*.png" -o -name "*.md" 2>/dev/null | head -10 || echo "No Playwright files found"

        # COMPREHENSIVE SEARCH: Look everywhere on the runner
        echo "📋 COMPREHENSIVE SEARCH - Looking for test-results anywhere on runner:"
        find / -type d -name "test-results" 2>/dev/null | head -20 || echo "No test-results directories found anywhere"

        echo "📋 COMPREHENSIVE SEARCH - Looking for playwright-report anywhere on runner:"
        find / -type d -name "playwright-report" 2>/dev/null | head -20 || echo "No playwright-report directories found anywhere"

        echo "📋 COMPREHENSIVE SEARCH - Looking for any Playwright files anywhere on runner:"
        find / -name "*.webm" -o -name "*.png" -o -name "*.md" 2>/dev/null | grep -E "(test-results|playwright)" | head -20 || echo "No Playwright files found anywhere"

        # Search in Docker containers
        echo "📋 DOCKER CONTAINER SEARCH:"
        echo "=========================="
        for container in $(docker ps --format "{{.Names}}"); do
          echo "📋 Searching in container: $container"
          echo "  - Looking for test-results:"
          docker exec $container find / -type d -name "test-results" 2>/dev/null | head -10 || echo "    No test-results found"
          echo "  - Looking for playwright-report:"
          docker exec $container find / -type d -name "playwright-report" 2>/dev/null | head -10 || echo "    No playwright-report found"
          echo "  - Looking for Playwright files:"
          docker exec $container find / -name "*.webm" -o -name "*.png" -o -name "*.md" 2>/dev/null | grep -E "(test-results|playwright)" | head -10 || echo "    No Playwright files found"
        done

        # Copy artifacts to the root for upload
        if [ -d "frontend/test-results" ]; then
          echo "✅ Copying test-results from frontend/test-results"
          cp -r frontend/test-results ./
        fi

        if [ -d "frontend/playwright-report" ]; then
          echo "✅ Copying playwright-report from frontend/playwright-report"
          cp -r frontend/playwright-report ./
        fi

        # List what we actually copied
        echo "📋 Final artifact directories on host:"
        ls -la test-results* playwright-report* 2>/dev/null || echo "No artifacts found"

    - name: Upload Playwright test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-test-results-e2e-global-analysis
        path: |
          test-results/
          playwright-report/
        retention-days: 7

    - name: Stop services
      if: always()
      run: |
        docker stop backend-server || true
        docker stop frontend-server || true

  e2e-professional-analysis-tests:
    name: E2E Professional Analysis Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [backend-smoke-tests, frontend-integration-tests, backend-integration-tests, e2e-container-build-optimized]
    if: ${{ github.event.inputs.run_e2e_tests == true && (github.event.inputs.e2e_test_suite == 'all' || github.event.inputs.e2e_test_suite == 'professional-analysis' || github.event.inputs.e2e_test_suite == '') }}

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install diesel CLI
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend

    - name: Wait for PostgreSQL to be ready
      run: |
        echo "🔍 Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "✅ PostgreSQL is ready!"
            break
          fi
          echo "⏳ Attempt $i/30: PostgreSQL not ready yet, waiting 2 seconds..."
          sleep 2
        done

        # Additional verification with a simple query
        echo "🔍 Verifying PostgreSQL is fully functional..."
        PGPASSWORD=password psql -h localhost -p 5432 -U postgres -d econ_graph_test -c "SELECT 1;" || {
          echo "❌ PostgreSQL health check failed"
          exit 1
        }
        echo "✅ PostgreSQL is fully functional!"

    - name: Download optimized E2E containers
      uses: actions/download-artifact@v4
      with:
        name: e2e-containers-optimized

    - name: Load optimized E2E containers
      run: |
        docker load < e2e-container-optimized.tar.gz
        docker load < e2e-mobile-container-optimized.tar.gz

    - name: Start services with health checks
      run: |
        # Start both frontend and backend services with proper health checks
        chmod +x scripts/start-services-with-health-checks.sh
        ./scripts/start-services-with-health-checks.sh

        # Wait for frontend to be ready
        for i in {1..30}; do
          if curl -f http://localhost:3000 2>/dev/null; then
            echo "Frontend is ready!"
            break
          fi
          echo "Waiting for frontend... ($i/30)"
          sleep 2
        done

    - name: Run Professional Analysis E2E Tests
      run: |
        # Verify frontend connectivity and capture both backend and frontend logs during test execution
        chmod +x scripts/verify-frontend-connectivity.sh
        chmod +x scripts/run-e2e-with-backend-logs.sh
        chmod +x scripts/run-e2e-with-frontend-logs.sh
        # Execute E2E tests with proper exit code propagation
        set -e  # Exit on any command failure
        ./scripts/verify-frontend-connectivity.sh ./scripts/run-e2e-with-frontend-logs.sh ./scripts/run-e2e-with-backend-logs.sh docker run --rm \
          --network host \
          -w /app/frontend \
          -e BASE_URL=http://localhost:3000 \
          econ-graph-e2e-optimized:latest \
          npm run test:e2e:professional-analysis

    - name: Copy Playwright test artifacts from runner filesystem
      if: always()
      run: |
        echo "📋 Copying Playwright test artifacts from runner filesystem..."
        echo "⚠️  FIXED: Playwright artifacts are on the runner, not in containers!"

        # Playwright artifacts are on the runner, not in containers
        # They should be in the frontend directory after the test run
        echo "📋 Current working directory: $(pwd)"
        echo "📋 Contents of current directory:"
        ls -la

        echo "📋 Contents of frontend directory:"
        ls -la frontend/ || echo "No frontend directory found"

        echo "📋 COMPREHENSIVE ARTIFACT SEARCH:"
        echo "================================="

        # Search in frontend directory
        echo "📋 Searching for test-results in frontend directory:"
        find frontend -name "test-results" -type d 2>/dev/null || echo "No test-results directory found"

        echo "📋 Searching for playwright-report in frontend directory:"
        find frontend -name "playwright-report" -type d 2>/dev/null || echo "No playwright-report directory found"

        # Search for individual Playwright files
        echo "📋 Searching for Playwright files (*.webm, *.png, *.md) in frontend directory:"
        find frontend -name "*.webm" -o -name "*.png" -o -name "*.md" 2>/dev/null | head -10 || echo "No Playwright files found"

        # COMPREHENSIVE SEARCH: Look everywhere on the runner
        echo "📋 COMPREHENSIVE SEARCH - Looking for test-results anywhere on runner:"
        find / -type d -name "test-results" 2>/dev/null | head -20 || echo "No test-results directories found anywhere"

        echo "📋 COMPREHENSIVE SEARCH - Looking for playwright-report anywhere on runner:"
        find / -type d -name "playwright-report" 2>/dev/null | head -20 || echo "No playwright-report directories found anywhere"

        echo "📋 COMPREHENSIVE SEARCH - Looking for any Playwright files anywhere on runner:"
        find / -name "*.webm" -o -name "*.png" -o -name "*.md" 2>/dev/null | grep -E "(test-results|playwright)" | head -20 || echo "No Playwright files found anywhere"

        # Search in Docker containers
        echo "📋 DOCKER CONTAINER SEARCH:"
        echo "=========================="
        for container in $(docker ps --format "{{.Names}}"); do
          echo "📋 Searching in container: $container"
          echo "  - Looking for test-results:"
          docker exec $container find / -type d -name "test-results" 2>/dev/null | head -10 || echo "    No test-results found"
          echo "  - Looking for playwright-report:"
          docker exec $container find / -type d -name "playwright-report" 2>/dev/null | head -10 || echo "    No playwright-report found"
          echo "  - Looking for Playwright files:"
          docker exec $container find / -name "*.webm" -o -name "*.png" -o -name "*.md" 2>/dev/null | grep -E "(test-results|playwright)" | head -10 || echo "    No Playwright files found"
        done

        # Copy artifacts to the root for upload
        if [ -d "frontend/test-results" ]; then
          echo "✅ Copying test-results from frontend/test-results"
          cp -r frontend/test-results ./
        fi

        if [ -d "frontend/playwright-report" ]; then
          echo "✅ Copying playwright-report from frontend/playwright-report"
          cp -r frontend/playwright-report ./
        fi

        # List what we actually copied
        echo "📋 Final artifact directories on host:"
        ls -la test-results* playwright-report* 2>/dev/null || echo "No artifacts found"

    - name: Upload Playwright test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-test-results-e2e-professional-analysis
        path: |
          test-results/
          playwright-report/
        retention-days: 7

    - name: Stop services
      if: always()
      run: |
        docker stop backend-server || true
        docker stop frontend-server || true

  e2e-comprehensive-tests:
    name: E2E Comprehensive Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [backend-smoke-tests, frontend-integration-tests, backend-integration-tests, e2e-container-build-optimized]
    if: ${{ github.event.inputs.run_e2e_tests == true && (github.event.inputs.e2e_test_suite == 'all' || github.event.inputs.e2e_test_suite == 'comprehensive' || github.event.inputs.e2e_test_suite == '') }}

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install diesel CLI
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend

    - name: Wait for PostgreSQL to be ready
      run: |
        echo "🔍 Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "✅ PostgreSQL is ready!"
            break
          fi
          echo "⏳ Attempt $i/30: PostgreSQL not ready yet, waiting 2 seconds..."
          sleep 2
        done

        # Additional verification with a simple query
        echo "🔍 Verifying PostgreSQL is fully functional..."
        PGPASSWORD=password psql -h localhost -p 5432 -U postgres -d econ_graph_test -c "SELECT 1;" || {
          echo "❌ PostgreSQL health check failed"
          exit 1
        }
        echo "✅ PostgreSQL is fully functional!"

    - name: Download optimized E2E containers
      uses: actions/download-artifact@v4
      with:
        name: e2e-containers-optimized

    - name: Load optimized E2E containers
      run: |
        docker load < e2e-container-optimized.tar.gz
        docker load < e2e-mobile-container-optimized.tar.gz

    # Backend is already built in the optimized container, no need to build it again

    - name: Start services with health checks
      run: |
        # Start both frontend and backend services with proper health checks
        chmod +x scripts/start-services-with-health-checks.sh
        ./scripts/start-services-with-health-checks.sh

        # Wait for frontend to be ready
        for i in {1..30}; do
          if curl -f http://localhost:3000 2>/dev/null; then
            echo "Frontend is ready!"
            break
          fi
          echo "Waiting for frontend... ($i/30)"
          sleep 2
        done

    - name: Run end-to-end tests
      run: |
        # Verify frontend connectivity and capture both backend and frontend logs during test execution
        chmod +x scripts/verify-frontend-connectivity.sh
        chmod +x scripts/run-e2e-with-backend-logs.sh
        chmod +x scripts/run-e2e-with-frontend-logs.sh
        # Execute E2E tests with proper exit code propagation
        set -e  # Exit on any command failure
        ./scripts/verify-frontend-connectivity.sh ./scripts/run-e2e-with-frontend-logs.sh ./scripts/run-e2e-with-backend-logs.sh docker run --rm \
          --network host \
          -w /app/frontend \
          -e BASE_URL=http://localhost:3000 \
          econ-graph-e2e-optimized:latest \
          npm run test:e2e:comprehensive

    - name: Copy Playwright test artifacts from runner filesystem
      if: always()
      run: |
        echo "📋 Copying Playwright test artifacts from runner filesystem..."
        echo "⚠️  FIXED: Playwright artifacts are on the runner, not in containers!"

        # Playwright artifacts are on the runner, not in containers
        # They should be in the frontend directory after the test run
        echo "📋 Current working directory: $(pwd)"
        echo "📋 Contents of current directory:"
        ls -la

        echo "📋 Contents of frontend directory:"
        ls -la frontend/ || echo "No frontend directory found"

        echo "📋 COMPREHENSIVE ARTIFACT SEARCH:"
        echo "================================="

        # Search in frontend directory
        echo "📋 Searching for test-results in frontend directory:"
        find frontend -name "test-results" -type d 2>/dev/null || echo "No test-results directory found"

        echo "📋 Searching for playwright-report in frontend directory:"
        find frontend -name "playwright-report" -type d 2>/dev/null || echo "No playwright-report directory found"

        # Search for individual Playwright files
        echo "📋 Searching for Playwright files (*.webm, *.png, *.md) in frontend directory:"
        find frontend -name "*.webm" -o -name "*.png" -o -name "*.md" 2>/dev/null | head -10 || echo "No Playwright files found"

        # COMPREHENSIVE SEARCH: Look everywhere on the runner
        echo "📋 COMPREHENSIVE SEARCH - Looking for test-results anywhere on runner:"
        find / -type d -name "test-results" 2>/dev/null | head -20 || echo "No test-results directories found anywhere"

        echo "📋 COMPREHENSIVE SEARCH - Looking for playwright-report anywhere on runner:"
        find / -type d -name "playwright-report" 2>/dev/null | head -20 || echo "No playwright-report directories found anywhere"

        echo "📋 COMPREHENSIVE SEARCH - Looking for any Playwright files anywhere on runner:"
        find / -name "*.webm" -o -name "*.png" -o -name "*.md" 2>/dev/null | grep -E "(test-results|playwright)" | head -20 || echo "No Playwright files found anywhere"

        # Search in Docker containers
        echo "📋 DOCKER CONTAINER SEARCH:"
        echo "=========================="
        for container in $(docker ps --format "{{.Names}}"); do
          echo "📋 Searching in container: $container"
          echo "  - Looking for test-results:"
          docker exec $container find / -type d -name "test-results" 2>/dev/null | head -10 || echo "    No test-results found"
          echo "  - Looking for playwright-report:"
          docker exec $container find / -type d -name "playwright-report" 2>/dev/null | head -10 || echo "    No playwright-report found"
          echo "  - Looking for Playwright files:"
          docker exec $container find / -name "*.webm" -o -name "*.png" -o -name "*.md" 2>/dev/null | grep -E "(test-results|playwright)" | head -10 || echo "    No Playwright files found"
        done

        # Copy artifacts to the root for upload
        if [ -d "frontend/test-results" ]; then
          echo "✅ Copying test-results from frontend/test-results"
          cp -r frontend/test-results ./
        fi

        if [ -d "frontend/playwright-report" ]; then
          echo "✅ Copying playwright-report from frontend/playwright-report"
          cp -r frontend/playwright-report ./
        fi

        # List what we actually copied
        echo "📋 Final artifact directories on host:"
        ls -la test-results* playwright-report* 2>/dev/null || echo "No artifacts found"

    - name: Upload Playwright test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-test-results-e2e-comprehensive
        path: |
          test-results/
          playwright-report/
        retention-days: 7

    - name: Stop services
      if: always()
      run: |
        docker stop backend-server || true
        docker stop frontend-server || true

  mobile-e2e-global-analysis-tests:
    name: Mobile Global Analysis E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [backend-smoke-tests, frontend-integration-tests, backend-integration-tests, e2e-container-build-optimized]
    if: ${{ github.event.inputs.run_e2e_tests == true && (github.event.inputs.e2e_test_suite == 'all' || github.event.inputs.e2e_test_suite == 'mobile-global-analysis' || github.event.inputs.e2e_test_suite == '') }}

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install diesel CLI
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend

    - name: Wait for PostgreSQL to be ready
      run: |
        echo "🔍 Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "✅ PostgreSQL is ready!"
            break
          fi
          echo "⏳ Attempt $i/30: PostgreSQL not ready yet, waiting 2 seconds..."
          sleep 2
        done

        # Additional verification with a simple query
        echo "🔍 Verifying PostgreSQL is fully functional..."
        PGPASSWORD=password psql -h localhost -p 5432 -U postgres -d econ_graph_test -c "SELECT 1;" || {
          echo "❌ PostgreSQL health check failed"
          exit 1
        }
        echo "✅ PostgreSQL is fully functional!"

    - name: Download optimized E2E containers
      uses: actions/download-artifact@v4
      with:
        name: e2e-containers-optimized

    - name: Load optimized E2E containers
      run: |
        docker load < e2e-container-optimized.tar.gz
        docker load < e2e-mobile-container-optimized.tar.gz

    - name: Start backend service
      run: |
        # Use comprehensive debugging script to diagnose all possible backend startup issues
        chmod +x scripts/debug-backend-startup.sh
        ./scripts/debug-backend-startup.sh

    - name: Start frontend service
      run: |
        # Use the pre-built frontend from the container
        docker run --rm -d --name frontend-server \
          --network host \
          econ-graph-e2e-mobile-optimized:latest \
          npx serve -s build -l 3000

        # Wait for frontend to be ready
        for i in {1..30}; do
          if curl -f http://localhost:3000 2>/dev/null; then
            echo "Frontend is ready!"
            break
          fi
          echo "Waiting for frontend... ($i/30)"
          sleep 2
        done

    - name: Run Mobile Global Analysis E2E Tests
      run: |
        # Use our log tailing script to capture backend logs during test execution
        # Ensure proper exit code propagation from Playwright tests
        set -e  # Exit on any command failure
        chmod +x scripts/run-e2e-with-backend-logs.sh
        ./scripts/run-e2e-with-backend-logs.sh docker run --rm \
          --network host \
          -w /app/frontend \
          -e BASE_URL=http://localhost:3000 \
          econ-graph-e2e-mobile-optimized:latest \
          npm run test:e2e:mobile:global-analysis

    - name: Copy Playwright test artifacts from runner filesystem
      if: always()
      run: |
        echo "📋 Copying Playwright test artifacts from runner filesystem..."
        echo "⚠️  FIXED: Playwright artifacts are on the runner, not in containers!"

        # Playwright artifacts are on the runner, not in containers
        # They should be in the frontend directory after the test run
        echo "📋 Current working directory: $(pwd)"
        echo "📋 Contents of current directory:"
        ls -la

        echo "📋 Contents of frontend directory:"
        ls -la frontend/ || echo "No frontend directory found"

        echo "📋 COMPREHENSIVE ARTIFACT SEARCH:"
        echo "================================="

        # Search in frontend directory
        echo "📋 Searching for test-results in frontend directory:"
        find frontend -name "test-results" -type d 2>/dev/null || echo "No test-results directory found"

        echo "📋 Searching for playwright-report in frontend directory:"
        find frontend -name "playwright-report" -type d 2>/dev/null || echo "No playwright-report directory found"

        # Search for individual Playwright files
        echo "📋 Searching for Playwright files (*.webm, *.png, *.md) in frontend directory:"
        find frontend -name "*.webm" -o -name "*.png" -o -name "*.md" 2>/dev/null | head -10 || echo "No Playwright files found"

        # COMPREHENSIVE SEARCH: Look everywhere on the runner
        echo "📋 COMPREHENSIVE SEARCH - Looking for test-results anywhere on runner:"
        find / -type d -name "test-results" 2>/dev/null | head -20 || echo "No test-results directories found anywhere"

        echo "📋 COMPREHENSIVE SEARCH - Looking for playwright-report anywhere on runner:"
        find / -type d -name "playwright-report" 2>/dev/null | head -20 || echo "No playwright-report directories found anywhere"

        echo "📋 COMPREHENSIVE SEARCH - Looking for any Playwright files anywhere on runner:"
        find / -name "*.webm" -o -name "*.png" -o -name "*.md" 2>/dev/null | grep -E "(test-results|playwright)" | head -20 || echo "No Playwright files found anywhere"

        # Search in Docker containers
        echo "📋 DOCKER CONTAINER SEARCH:"
        echo "=========================="
        for container in $(docker ps --format "{{.Names}}"); do
          echo "📋 Searching in container: $container"
          echo "  - Looking for test-results:"
          docker exec $container find / -type d -name "test-results" 2>/dev/null | head -10 || echo "    No test-results found"
          echo "  - Looking for playwright-report:"
          docker exec $container find / -type d -name "playwright-report" 2>/dev/null | head -10 || echo "    No playwright-report found"
          echo "  - Looking for Playwright files:"
          docker exec $container find / -name "*.webm" -o -name "*.png" -o -name "*.md" 2>/dev/null | grep -E "(test-results|playwright)" | head -10 || echo "    No Playwright files found"
        done

        # Copy artifacts to the root for upload
        if [ -d "frontend/test-results" ]; then
          echo "✅ Copying test-results from frontend/test-results"
          cp -r frontend/test-results ./
        fi

        if [ -d "frontend/playwright-report" ]; then
          echo "✅ Copying playwright-report from frontend/playwright-report"
          cp -r frontend/playwright-report ./
        fi

        # List what we actually copied
        echo "📋 Final artifact directories on host:"
        ls -la test-results* playwright-report* 2>/dev/null || echo "No artifacts found"

    - name: Upload Playwright test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-test-results-mobile-e2e-global-analysis
        path: |
          test-results/
          playwright-report/
        retention-days: 7

    - name: Stop services
      if: always()
      run: |
        docker stop backend-server || true
        docker stop frontend-server || true

  mobile-e2e-professional-analysis-tests:
    name: Mobile Professional Analysis E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [backend-smoke-tests, frontend-integration-tests, backend-integration-tests, e2e-container-build-optimized]
    if: ${{ github.event.inputs.run_e2e_tests == true && (github.event.inputs.e2e_test_suite == 'all' || github.event.inputs.e2e_test_suite == 'mobile-professional-analysis' || github.event.inputs.e2e_test_suite == '') }}

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install diesel CLI
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend

    - name: Wait for PostgreSQL to be ready
      run: |
        echo "🔍 Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "✅ PostgreSQL is ready!"
            break
          fi
          echo "⏳ Attempt $i/30: PostgreSQL not ready yet, waiting 2 seconds..."
          sleep 2
        done

        # Additional verification with a simple query
        echo "🔍 Verifying PostgreSQL is fully functional..."
        PGPASSWORD=password psql -h localhost -p 5432 -U postgres -d econ_graph_test -c "SELECT 1;" || {
          echo "❌ PostgreSQL health check failed"
          exit 1
        }
        echo "✅ PostgreSQL is fully functional!"

    - name: Download optimized E2E containers
      uses: actions/download-artifact@v4
      with:
        name: e2e-containers-optimized

    - name: Load optimized E2E containers
      run: |
        docker load < e2e-container-optimized.tar.gz
        docker load < e2e-mobile-container-optimized.tar.gz

    - name: Start backend service
      run: |
        # Use comprehensive debugging script to diagnose all possible backend startup issues
        chmod +x scripts/debug-backend-startup.sh
        ./scripts/debug-backend-startup.sh

    - name: Start frontend service
      run: |
        # Use the pre-built frontend from the container
        docker run --rm -d --name frontend-server \
          --network host \
          econ-graph-e2e-mobile-optimized:latest \
          npx serve -s build -l 3000

        # Wait for frontend to be ready
        for i in {1..30}; do
          if curl -f http://localhost:3000 2>/dev/null; then
            echo "Frontend is ready!"
            break
          fi
          echo "Waiting for frontend... ($i/30)"
          sleep 2
        done

    - name: Run Mobile Professional Analysis E2E Tests
      run: |
        # Use our log tailing script to capture backend logs during test execution
        # Ensure proper exit code propagation from Playwright tests
        set -e  # Exit on any command failure
        chmod +x scripts/run-e2e-with-backend-logs.sh
        ./scripts/run-e2e-with-backend-logs.sh docker run --rm \
          --network host \
          -w /app/frontend \
          -e BASE_URL=http://localhost:3000 \
          econ-graph-e2e-mobile-optimized:latest \
          npm run test:e2e:mobile:professional-analysis

    - name: Copy Playwright test artifacts from runner filesystem
      if: always()
      run: |
        echo "📋 Copying Playwright test artifacts from runner filesystem..."
        echo "⚠️  FIXED: Playwright artifacts are on the runner, not in containers!"

        # Playwright artifacts are on the runner, not in containers
        # They should be in the frontend directory after the test run
        echo "📋 Current working directory: $(pwd)"
        echo "📋 Contents of current directory:"
        ls -la

        echo "📋 Contents of frontend directory:"
        ls -la frontend/ || echo "No frontend directory found"

        echo "📋 COMPREHENSIVE ARTIFACT SEARCH:"
        echo "================================="

        # Search in frontend directory
        echo "📋 Searching for test-results in frontend directory:"
        find frontend -name "test-results" -type d 2>/dev/null || echo "No test-results directory found"

        echo "📋 Searching for playwright-report in frontend directory:"
        find frontend -name "playwright-report" -type d 2>/dev/null || echo "No playwright-report directory found"

        # Search for individual Playwright files
        echo "📋 Searching for Playwright files (*.webm, *.png, *.md) in frontend directory:"
        find frontend -name "*.webm" -o -name "*.png" -o -name "*.md" 2>/dev/null | head -10 || echo "No Playwright files found"

        # COMPREHENSIVE SEARCH: Look everywhere on the runner
        echo "📋 COMPREHENSIVE SEARCH - Looking for test-results anywhere on runner:"
        find / -type d -name "test-results" 2>/dev/null | head -20 || echo "No test-results directories found anywhere"

        echo "📋 COMPREHENSIVE SEARCH - Looking for playwright-report anywhere on runner:"
        find / -type d -name "playwright-report" 2>/dev/null | head -20 || echo "No playwright-report directories found anywhere"

        echo "📋 COMPREHENSIVE SEARCH - Looking for any Playwright files anywhere on runner:"
        find / -name "*.webm" -o -name "*.png" -o -name "*.md" 2>/dev/null | grep -E "(test-results|playwright)" | head -20 || echo "No Playwright files found anywhere"

        # Search in Docker containers
        echo "📋 DOCKER CONTAINER SEARCH:"
        echo "=========================="
        for container in $(docker ps --format "{{.Names}}"); do
          echo "📋 Searching in container: $container"
          echo "  - Looking for test-results:"
          docker exec $container find / -type d -name "test-results" 2>/dev/null | head -10 || echo "    No test-results found"
          echo "  - Looking for playwright-report:"
          docker exec $container find / -type d -name "playwright-report" 2>/dev/null | head -10 || echo "    No playwright-report found"
          echo "  - Looking for Playwright files:"
          docker exec $container find / -name "*.webm" -o -name "*.png" -o -name "*.md" 2>/dev/null | grep -E "(test-results|playwright)" | head -10 || echo "    No Playwright files found"
        done

        # Copy artifacts to the root for upload
        if [ -d "frontend/test-results" ]; then
          echo "✅ Copying test-results from frontend/test-results"
          cp -r frontend/test-results ./
        fi

        if [ -d "frontend/playwright-report" ]; then
          echo "✅ Copying playwright-report from frontend/playwright-report"
          cp -r frontend/playwright-report ./
        fi

        # List what we actually copied
        echo "📋 Final artifact directories on host:"
        ls -la test-results* playwright-report* 2>/dev/null || echo "No artifacts found"

    - name: Upload Playwright test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-test-results-mobile-e2e-professional-analysis
        path: |
          test-results/
          playwright-report/
        retention-days: 7

    - name: Stop services
      if: always()
      run: |
        docker stop backend-server || true
        docker stop frontend-server || true

  mobile-e2e-tests:
    name: Mobile End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [backend-smoke-tests, frontend-integration-tests, backend-integration-tests, e2e-container-build-optimized]
    if: ${{ github.event.inputs.run_e2e_tests == true && (github.event.inputs.e2e_test_suite == 'all' || github.event.inputs.e2e_test_suite == 'mobile-core' || github.event.inputs.e2e_test_suite == 'mobile-comprehensive' || github.event.inputs.e2e_test_suite == '') }}

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: econ_graph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          backend/target
        key: ${{ runner.os }}-shared-cargo-v2
        restore-keys: |
          ${{ runner.os }}-shared-cargo-

    - name: Install diesel CLI
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        cargo install diesel_cli --no-default-features --features postgres --verbose --force
      working-directory: backend

    - name: Setup database
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        diesel setup
        diesel migration run
      working-directory: backend

    - name: Wait for PostgreSQL to be ready
      run: |
        echo "🔍 Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "✅ PostgreSQL is ready!"
            break
          fi
          echo "⏳ Attempt $i/30: PostgreSQL not ready yet, waiting 2 seconds..."
          sleep 2
        done

        # Additional verification with a simple query
        echo "🔍 Verifying PostgreSQL is fully functional..."
        PGPASSWORD=password psql -h localhost -p 5432 -U postgres -d econ_graph_test -c "SELECT 1;" || {
          echo "❌ PostgreSQL health check failed"
          exit 1
        }
        echo "✅ PostgreSQL is fully functional!"

    - name: Download optimized E2E containers
      uses: actions/download-artifact@v4
      with:
        name: e2e-containers-optimized

    - name: Load optimized E2E containers
      run: |
        docker load < e2e-container-optimized.tar.gz
        docker load < e2e-mobile-container-optimized.tar.gz

    - name: Start backend service
      run: |
        # Use comprehensive debugging script to diagnose all possible backend startup issues
        chmod +x scripts/debug-backend-startup.sh
        ./scripts/debug-backend-startup.sh

    - name: Start frontend service
      run: |
        # Use the pre-built frontend from the container
        docker run --rm -d --name frontend-server \
          --network host \
          econ-graph-e2e-mobile-optimized:latest \
          npx serve -s build -l 3000

        # Wait for frontend to be ready
        for i in {1..30}; do
          if curl -f http://localhost:3000 2>/dev/null; then
            echo "Frontend is ready!"
            break
          fi
          echo "Waiting for frontend... ($i/30)"
          sleep 2
        done

    - name: Run mobile end-to-end tests (core only)
      run: |
        # Use our log tailing script to capture backend logs during test execution
        # Ensure proper exit code propagation from Playwright tests
        set -e  # Exit on any command failure
        chmod +x scripts/run-e2e-with-backend-logs.sh
        ./scripts/run-e2e-with-backend-logs.sh docker run --rm \
          --network host \
          -w /app/frontend \
          -e BASE_URL=http://localhost:3000 \
          econ-graph-e2e-mobile-optimized:latest \
          npm run test:e2e:mobile:core

    - name: Copy Playwright test artifacts from runner filesystem
      if: always()
      run: |
        echo "📋 Copying Playwright test artifacts from runner filesystem..."
        echo "⚠️  FIXED: Playwright artifacts are on the runner, not in containers!"

        # Playwright artifacts are on the runner, not in containers
        # They should be in the frontend directory after the test run
        echo "📋 Current working directory: $(pwd)"
        echo "📋 Contents of current directory:"
        ls -la

        echo "📋 Contents of frontend directory:"
        ls -la frontend/ || echo "No frontend directory found"

        echo "📋 COMPREHENSIVE ARTIFACT SEARCH:"
        echo "================================="

        # Search in frontend directory
        echo "📋 Searching for test-results in frontend directory:"
        find frontend -name "test-results" -type d 2>/dev/null || echo "No test-results directory found"

        echo "📋 Searching for playwright-report in frontend directory:"
        find frontend -name "playwright-report" -type d 2>/dev/null || echo "No playwright-report directory found"

        # Search for individual Playwright files
        echo "📋 Searching for Playwright files (*.webm, *.png, *.md) in frontend directory:"
        find frontend -name "*.webm" -o -name "*.png" -o -name "*.md" 2>/dev/null | head -10 || echo "No Playwright files found"

        # COMPREHENSIVE SEARCH: Look everywhere on the runner
        echo "📋 COMPREHENSIVE SEARCH - Looking for test-results anywhere on runner:"
        find / -type d -name "test-results" 2>/dev/null | head -20 || echo "No test-results directories found anywhere"

        echo "📋 COMPREHENSIVE SEARCH - Looking for playwright-report anywhere on runner:"
        find / -type d -name "playwright-report" 2>/dev/null | head -20 || echo "No playwright-report directories found anywhere"

        echo "📋 COMPREHENSIVE SEARCH - Looking for any Playwright files anywhere on runner:"
        find / -name "*.webm" -o -name "*.png" -o -name "*.md" 2>/dev/null | grep -E "(test-results|playwright)" | head -20 || echo "No Playwright files found anywhere"

        # Search in Docker containers
        echo "📋 DOCKER CONTAINER SEARCH:"
        echo "=========================="
        for container in $(docker ps --format "{{.Names}}"); do
          echo "📋 Searching in container: $container"
          echo "  - Looking for test-results:"
          docker exec $container find / -type d -name "test-results" 2>/dev/null | head -10 || echo "    No test-results found"
          echo "  - Looking for playwright-report:"
          docker exec $container find / -type d -name "playwright-report" 2>/dev/null | head -10 || echo "    No playwright-report found"
          echo "  - Looking for Playwright files:"
          docker exec $container find / -name "*.webm" -o -name "*.png" -o -name "*.md" 2>/dev/null | grep -E "(test-results|playwright)" | head -10 || echo "    No Playwright files found"
        done

        # Copy artifacts to the root for upload
        if [ -d "frontend/test-results" ]; then
          echo "✅ Copying test-results from frontend/test-results"
          cp -r frontend/test-results ./
        fi

        if [ -d "frontend/playwright-report" ]; then
          echo "✅ Copying playwright-report from frontend/playwright-report"
          cp -r frontend/playwright-report ./
        fi

        # List what we actually copied
        echo "📋 Final artifact directories on host:"
        ls -la test-results* playwright-report* 2>/dev/null || echo "No artifacts found"

    - name: Upload Playwright test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-test-results-mobile-e2e-core
        path: |
          test-results/
          playwright-report/
        retention-days: 7

    - name: Stop services
      if: always()
      run: |
        docker stop backend-server || true
        docker stop frontend-server || true

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [backend-smoke-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: econ-graph-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: econ-graph-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker images
      run: |
        echo "Testing backend Docker image..."
        docker run --rm econ-graph-backend:test --version || echo "Backend image test completed"

        echo "Testing frontend Docker image..."
        docker run --rm econ-graph-frontend:test --version || echo "Frontend image test completed"
# Updated Wed Sep 17 08:11:38 PDT 2025

# Workflow cache refresh: 2025-09-17 08:25:07 PDT
