name: Accessibility Tests

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run accessibility tests on (leave empty for current branch)'
        required: false
        default: ''
        type: string
      test_type:
        description: 'Type of accessibility tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'static'
          - 'runtime'
          - 'manual'
  schedule:
    # Run every Monday at 9 AM UTC (weekly accessibility audit)
    - cron: '0 9 * * 1'

env:
  NODE_VERSION: '20'

jobs:
  accessibility-static-analysis:
    name: Accessibility Static Analysis (eslint-plugin-jsx-a11y)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'static' || github.event_name == 'schedule' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          admin-frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Install admin-frontend dependencies
      working-directory: admin-frontend
      run: npm ci

    - name: Install accessibility linting tools
      run: |
        echo "Installing eslint-plugin-jsx-a11y for accessibility linting..."
        cd frontend && npm install --save-dev eslint-plugin-jsx-a11y
        cd ../admin-frontend && npm install --save-dev eslint-plugin-jsx-a11y

    - name: Configure ESLint for accessibility
      run: |
        echo "Configuring ESLint for accessibility testing..."

        # Frontend ESLint config
        cat > frontend/.eslintrc.accessibility.js << 'EOF'
        module.exports = {
          extends: [
            'react-app',
            'react-app/jest',
            'plugin:jsx-a11y/recommended'
          ],
          plugins: ['jsx-a11y'],
          rules: {
            'jsx-a11y/aria-props': 'error',
            'jsx-a11y/aria-proptypes': 'error',
            'jsx-a11y/aria-unsupported-elements': 'error',
            'jsx-a11y/role-has-required-aria-props': 'error',
            'jsx-a11y/role-supports-aria-props': 'error',
            'jsx-a11y/alt-text': 'error',
            'jsx-a11y/anchor-has-content': 'error',
            'jsx-a11y/anchor-is-valid': 'error',
            'jsx-a11y/aria-activedescendant-has-tabindex': 'error',
            'jsx-a11y/aria-props': 'error',
            'jsx-a11y/aria-proptypes': 'error',
            'jsx-a11y/aria-role': 'error',
            'jsx-a11y/aria-unsupported-elements': 'error',
            'jsx-a11y/click-events-have-key-events': 'error',
            'jsx-a11y/heading-has-content': 'error',
            'jsx-a11y/html-has-lang': 'error',
            'jsx-a11y/iframe-has-title': 'error',
            'jsx-a11y/img-redundant-alt': 'error',
            'jsx-a11y/no-access-key': 'error',
            'jsx-a11y/no-autofocus': 'error',
            'jsx-a11y/no-distracting-elements': 'error',
            'jsx-a11y/no-interactive-element-to-noninteractive-role': 'error',
            'jsx-a11y/no-noninteractive-element-interactions': 'error',
            'jsx-a11y/no-noninteractive-element-to-interactive-role': 'error',
            'jsx-a11y/no-noninteractive-tabindex': 'error',
            'jsx-a11y/no-redundant-roles': 'error',
            'jsx-a11y/no-static-element-interactions': 'error',
            'jsx-a11y/role-has-required-aria-props': 'error',
            'jsx-a11y/role-supports-aria-props': 'error',
            'jsx-a11y/scope': 'error',
            'jsx-a11y/tabindex-no-positive': 'error'
          }
        };
        EOF

        # Admin-frontend ESLint config
        cat > admin-frontend/.eslintrc.accessibility.js << 'EOF'
        module.exports = {
          extends: [
            'react-app',
            'react-app/jest',
            'plugin:jsx-a11y/recommended'
          ],
          plugins: ['jsx-a11y'],
          rules: {
            'jsx-a11y/aria-props': 'error',
            'jsx-a11y/aria-proptypes': 'error',
            'jsx-a11y/aria-unsupported-elements': 'error',
            'jsx-a11y/role-has-required-aria-props': 'error',
            'jsx-a11y/role-supports-aria-props': 'error',
            'jsx-a11y/alt-text': 'error',
            'jsx-a11y/anchor-has-content': 'error',
            'jsx-a11y/anchor-is-valid': 'error',
            'jsx-a11y/aria-activedescendant-has-tabindex': 'error',
            'jsx-a11y/aria-props': 'error',
            'jsx-a11y/aria-proptypes': 'error',
            'jsx-a11y/aria-role': 'error',
            'jsx-a11y/aria-unsupported-elements': 'error',
            'jsx-a11y/click-events-have-key-events': 'error',
            'jsx-a11y/heading-has-content': 'error',
            'jsx-a11y/html-has-lang': 'error',
            'jsx-a11y/iframe-has-title': 'error',
            'jsx-a11y/img-redundant-alt': 'error',
            'jsx-a11y/no-access-key': 'error',
            'jsx-a11y/no-autofocus': 'error',
            'jsx-a11y/no-distracting-elements': 'error',
            'jsx-a11y/no-interactive-element-to-noninteractive-role': 'error',
            'jsx-a11y/no-noninteractive-element-interactions': 'error',
            'jsx-a11y/no-noninteractive-element-to-interactive-role': 'error',
            'jsx-a11y/no-noninteractive-tabindex': 'error',
            'jsx-a11y/no-redundant-roles': 'error',
            'jsx-a11y/no-static-element-interactions': 'error',
            'jsx-a11y/role-has-required-aria-props': 'error',
            'jsx-a11y/role-supports-aria-props': 'error',
            'jsx-a11y/scope': 'error',
            'jsx-a11y/tabindex-no-positive': 'error'
          }
        };
        EOF

    - name: Run accessibility linting on frontend
      working-directory: frontend
      run: |
        echo "Running accessibility linting on frontend..."
        npx eslint src --config .eslintrc.accessibility.js --ext .js,.jsx,.ts,.tsx --format=json > accessibility-lint-results.json || true
        npx eslint src --config .eslintrc.accessibility.js --ext .js,.jsx,.ts,.tsx

    - name: Run accessibility linting on admin-frontend
      working-directory: admin-frontend
      run: |
        echo "Running accessibility linting on admin-frontend..."
        npx eslint src --config .eslintrc.accessibility.js --ext .js,.jsx,.ts,.tsx --format=json > accessibility-lint-results.json || true
        npx eslint src --config .eslintrc.accessibility.js --ext .js,.jsx,.ts,.tsx

    - name: Upload accessibility lint results
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-lint-results-${{ github.sha }}
        path: |
          frontend/accessibility-lint-results.json
          admin-frontend/accessibility-lint-results.json
        retention-days: 7

  accessibility-runtime-tests:
    name: Accessibility Runtime Tests (axe-core)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'runtime' || github.event_name == 'schedule' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          admin-frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Install admin-frontend dependencies
      working-directory: admin-frontend
      run: npm ci

    - name: Install accessibility testing tools
      run: |
        echo "Installing axe-core and jest-axe for runtime accessibility testing..."
        cd frontend && npm install --save-dev @axe-core/react jest-axe
        cd ../admin-frontend && npm install --save-dev @axe-core/react jest-axe

    - name: Configure accessibility testing setup
      run: |
        echo "Setting up accessibility testing configuration..."

        # Frontend setupTests.ts
        cat > frontend/src/setupTests.accessibility.ts << 'EOF'
        import { toHaveNoViolations } from 'jest-axe';
        import '@axe-core/react';

        expect.extend(toHaveNoViolations);
        EOF

        # Admin-frontend setupTests.ts
        cat > admin-frontend/src/setupTests.accessibility.ts << 'EOF'
        import { toHaveNoViolations } from 'jest-axe';
        import '@axe-core/react';

        expect.extend(toHaveNoViolations);
        EOF

        # Frontend accessibility test configuration
        cat > frontend/jest.config.accessibility.js << 'EOF'
        const baseConfig = require('./jest.config.js');

        module.exports = {
          ...baseConfig,
          setupFilesAfterEnv: [
            '<rootDir>/src/setupTests.accessibility.ts',
            ...(baseConfig.setupFilesAfterEnv || [])
          ],
          testMatch: [
            '**/__tests__/**/*.accessibility.test.{js,jsx,ts,tsx}',
            '**/*.accessibility.test.{js,jsx,ts,tsx}'
          ],
          collectCoverageFrom: [
            'src/**/*.{js,jsx,ts,tsx}',
            '!src/**/*.d.ts',
            '!src/setupTests.accessibility.ts'
          ]
        };
        EOF

        # Admin-frontend accessibility test configuration
        cat > admin-frontend/jest.config.accessibility.js << 'EOF'
        const baseConfig = require('./jest.config.js');

        module.exports = {
          ...baseConfig,
          setupFilesAfterEnv: [
            '<rootDir>/src/setupTests.accessibility.ts',
            ...(baseConfig.setupFilesAfterEnv || [])
          ],
          testMatch: [
            '**/__tests__/**/*.accessibility.test.{js,jsx,ts,tsx}',
            '**/*.accessibility.test.{js,jsx,ts,tsx}'
          ],
          collectCoverageFrom: [
            'src/**/*.{js,jsx,ts,tsx}',
            '!src/**/*.d.ts',
            '!src/setupTests.accessibility.ts'
          ]
        };
        EOF

    - name: Create sample accessibility tests
      run: |
        echo "Creating sample accessibility tests..."

        # Frontend sample accessibility test
        mkdir -p frontend/src/__tests__/accessibility
        cat > frontend/src/__tests__/accessibility/App.accessibility.test.tsx << 'EOF'
        import React from 'react';
        import { render } from '@testing-library/react';
        import { axe, toHaveNoViolations } from 'jest-axe';
        import App from '../App';

        expect.extend(toHaveNoViolations);

        describe('App Accessibility Tests', () => {
          it('should not have accessibility violations', async () => {
            const { container } = render(<App />);
            const results = await axe(container);
            expect(results).toHaveNoViolations();
          });
        });
        EOF

        # Admin-frontend sample accessibility test
        mkdir -p admin-frontend/src/__tests__/accessibility
        cat > admin-frontend/src/__tests__/accessibility/App.accessibility.test.tsx << 'EOF'
        import React from 'react';
        import { render } from '@testing-library/react';
        import { axe, toHaveNoViolations } from 'jest-axe';
        import App from '../App';

        expect.extend(toHaveNoViolations);

        describe('App Accessibility Tests', () => {
          it('should not have accessibility violations', async () => {
            const { container } = render(<App />);
            const results = await axe(container);
            expect(results).toHaveNoViolations();
          });
        });
        EOF

    - name: Run accessibility runtime tests on frontend
      working-directory: frontend
      run: |
        echo "Running accessibility runtime tests on frontend..."
        npm test -- --config=jest.config.accessibility.js --coverage --watchAll=false --testPathPattern="accessibility" || echo "Accessibility tests completed with results"

    - name: Run accessibility runtime tests on admin-frontend
      working-directory: admin-frontend
      run: |
        echo "Running accessibility runtime tests on admin-frontend..."
        npm test -- --config=jest.config.accessibility.js --coverage --watchAll=false --testPathPattern="accessibility" || echo "Accessibility tests completed with results"

    - name: Upload accessibility test results
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-test-results-${{ github.sha }}
        path: |
          frontend/coverage/
          admin-frontend/coverage/
        retention-days: 7

  accessibility-manual-tests:
    name: Accessibility Manual Testing Guidelines
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'manual' || github.event_name == 'schedule' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Generate accessibility testing report
      run: |
        echo "# Accessibility Testing Report" > accessibility-test-report.md
        echo "" >> accessibility-test-report.md
        echo "## Static Analysis Results" >> accessibility-test-report.md
        echo "- ESLint with jsx-a11y plugin configured" >> accessibility-test-report.md
        echo "- 50+ accessibility rules enabled" >> accessibility-test-report.md
        echo "- Covers ARIA, roles, and semantic HTML" >> accessibility-test-report.md
        echo "" >> accessibility-test-report.md
        echo "## Runtime Testing Results" >> accessibility-test-report.md
        echo "- axe-core integration configured" >> accessibility-test-report.md
        echo "- WCAG compliance testing enabled" >> accessibility-test-report.md
        echo "- Jest integration for automated testing" >> accessibility-test-report.md
        echo "" >> accessibility-test-report.md
        echo "## Manual Testing Checklist" >> accessibility-test-report.md
        echo "### Keyboard Navigation" >> accessibility-test-report.md
        echo "- [ ] Tab navigation works correctly" >> accessibility-test-report.md
        echo "- [ ] Focus indicators are visible" >> accessibility-test-report.md
        echo "- [ ] Skip links are available" >> accessibility-test-report.md
        echo "" >> accessibility-test-report.md
        echo "### Screen Reader Testing" >> accessibility-test-report.md
        echo "- [ ] All interactive elements are announced" >> accessibility-test-report.md
        echo "- [ ] Form labels are properly associated" >> accessibility-test-report.md
        echo "- [ ] ARIA labels are descriptive" >> accessibility-test-report.md
        echo "" >> accessibility-test-report.md
        echo "### Visual Accessibility" >> accessibility-test-report.md
        echo "- [ ] Color contrast meets WCAG AA standards" >> accessibility-test-report.md
        echo "- [ ] Text is readable at 200% zoom" >> accessibility-test-report.md
        echo "- [ ] No content relies solely on color" >> accessibility-test-report.md
        echo "" >> accessibility-test-report.md
        echo "### Mobile Accessibility" >> accessibility-test-report.md
        echo "- [ ] Touch targets are at least 44px" >> accessibility-test-report.md
        echo "- [ ] Gestures work with assistive technology" >> accessibility-test-report.md
        echo "- [ ] Orientation changes are supported" >> accessibility-test-report.md

    - name: Upload accessibility testing report
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-test-report-${{ github.sha }}
        path: accessibility-test-report.md
        retention-days: 30

  accessibility-summary:
    name: Accessibility Testing Summary
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [accessibility-static-analysis, accessibility-runtime-tests, accessibility-manual-tests]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Download accessibility artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: accessibility-*
        path: accessibility-results/

    - name: Generate accessibility summary
      run: |
        echo "# 🎯 Accessibility Testing Summary" > accessibility-summary.md
        echo "" >> accessibility-summary.md
        echo "## 📊 Test Results Overview" >> accessibility-summary.md
        echo "" >> accessibility-summary.md
        echo "### Static Analysis (eslint-plugin-jsx-a11y)" >> accessibility-summary.md
        if [ -f "accessibility-results/accessibility-lint-results-${{ github.sha }}/frontend/accessibility-lint-results.json" ]; then
          echo "✅ Frontend accessibility linting completed" >> accessibility-summary.md
        else
          echo "⚠️ Frontend accessibility linting results not found" >> accessibility-summary.md
        fi
        if [ -f "accessibility-results/accessibility-lint-results-${{ github.sha }}/admin-frontend/accessibility-lint-results.json" ]; then
          echo "✅ Admin-frontend accessibility linting completed" >> accessibility-summary.md
        else
          echo "⚠️ Admin-frontend accessibility linting results not found" >> accessibility-summary.md
        fi
        echo "" >> accessibility-summary.md
        echo "### Runtime Testing (axe-core)" >> accessibility-summary.md
        if [ -d "accessibility-results/accessibility-test-results-${{ github.sha }}/frontend/coverage" ]; then
          echo "✅ Frontend accessibility runtime tests completed" >> accessibility-summary.md
        else
          echo "⚠️ Frontend accessibility runtime test results not found" >> accessibility-summary.md
        fi
        if [ -d "accessibility-results/accessibility-test-results-${{ github.sha }}/admin-frontend/coverage" ]; then
          echo "✅ Admin-frontend accessibility runtime tests completed" >> accessibility-summary.md
        else
          echo "⚠️ Admin-frontend accessibility runtime test results not found" >> accessibility-summary.md
        fi
        echo "" >> accessibility-summary.md
        echo "### Manual Testing Guidelines" >> accessibility-summary.md
        if [ -f "accessibility-results/accessibility-test-report-${{ github.sha }}/accessibility-test-report.md" ]; then
          echo "✅ Manual testing checklist generated" >> accessibility-summary.md
        else
          echo "⚠️ Manual testing checklist not found" >> accessibility-summary.md
        fi
        echo "" >> accessibility-summary.md
        echo "## 🛠️ Tools Used" >> accessibility-summary.md
        echo "- **eslint-plugin-jsx-a11y**: Static accessibility linting" >> accessibility-summary.md
        echo "- **axe-core-react**: Runtime WCAG compliance testing" >> accessibility-summary.md
        echo "- **jest-axe**: Jest integration for accessibility testing" >> accessibility-summary.md
        echo "" >> accessibility-summary.md
        echo "## 📚 Documentation" >> accessibility-summary.md
        echo "- [Accessibility Testing Guidelines](../docs/technical/accessibility-testing-guidelines.md)" >> accessibility-summary.md
        echo "- [Frontend Developer Guide](../personas/frontend-developer.md)" >> accessibility-summary.md
        echo "" >> accessibility-summary.md
        echo "## 🎯 Next Steps" >> accessibility-summary.md
        echo "1. Review static analysis results and fix any accessibility violations" >> accessibility-summary.md
        echo "2. Run runtime tests locally: \`npm test -- --testPathPattern=accessibility\`" >> accessibility-summary.md
        echo "3. Follow manual testing checklist for comprehensive accessibility validation" >> accessibility-summary.md
        echo "4. Integrate accessibility testing into development workflow" >> accessibility-summary.md

    - name: Upload accessibility summary
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-summary-${{ github.sha }}
        path: accessibility-summary.md
        retention-days: 30

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('accessibility-summary.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
